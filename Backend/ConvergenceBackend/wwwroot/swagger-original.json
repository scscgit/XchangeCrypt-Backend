{
	"swagger": "2.0",
	"info": {
		"description": "",
		"version": "",
		"title": "TradingView REST API Specification for Brokers"
	},
	"host": "rest-demo.tradingview.com",
	"basePath": "/tradingview/v1/",
	"tags": [
		{
			"name": "Trading Panel bridge (broker data & orders)",
			"description": ""
		},
		{
			"name": "Trading Panel bridge (orders only)",
			"description": ""
		},
		{
			"name": "Trading Terminal integration",
			"description": ""
		}
	],
	"schemes": [ "https" ],
	"consumes": [ "application/x-www-form-urlencoded" ],
	"produces": [ "application/json" ],
	"paths": {
		"/authorize": {
			"post": {
				"tags": [ "Trading Panel bridge (broker data & orders)", "Trading Panel bridge (orders only)" ],
				"description": "Oauth2 Password authorization",
				"parameters": [
					{
						"name": "login",
						"in": "formData",
						"description": "User Login",
						"required": true,
						"type": "string"
					},
					{
						"name": "password",
						"in": "formData",
						"description": "User Password",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Access Token. TradingView will set Authorization header to 'Bearer ' + access_token for all requests with authorization.",
						"schema": {
							"$ref": "#/definitions/inline_response_200"
						}
					}
				}
			}
		},
		"/config": {
			"get": {
				"tags": [ "Trading Panel bridge (broker data & orders)", "Trading Panel bridge (orders only)", "Trading Terminal integration" ],
				"description": "Get localized configuration",
				"parameters": [
					{
						"name": "locale",
						"in": "query",
						"description": "Locale (language) id",
						"required": true,
						"type": "string",
						"enum": [ "ar", "cs", "de", "el", "en", "es", "fa", "fr", "hu", "it", "ja", "ko", "nl", "pl", "pt", "ro", "ru", "sk", "sv", "th", "tr", "vi", "zh" ]
					}
				],
				"responses": {
					"200": {
						"description": "Configuration",
						"schema": {
							"$ref": "#/definitions/inline_response_200_1"
						}
					}
				},
				"security": [
					{
						"oauth": []
					}
				]
			}
		},
		"/accounts": {
			"get": {
				"tags": [ "Trading Panel bridge (broker data & orders)", "Trading Panel bridge (orders only)", "Trading Terminal integration" ],
				"description": "Get a list of accounts owned by the user",
				"parameters": [],
				"responses": {
					"200": {
						"description": "Accounts list",
						"schema": {
							"$ref": "#/definitions/inline_response_200_2"
						}
					}
				},
				"security": [
					{
						"oauth": []
					}
				]
			}
		},
		"/accounts/{accountId}/state": {
			"get": {
				"tags": [ "Trading Panel bridge (broker data & orders)", "Trading Panel bridge (orders only)", "Trading Terminal integration" ],
				"description": "Get account information.",
				"parameters": [
					{
						"name": "accountId",
						"in": "path",
						"description": "The account identifier",
						"required": true,
						"type": "string"
					},
					{
						"name": "locale",
						"in": "query",
						"description": "Locale (language) id",
						"required": true,
						"type": "string",
						"enum": [ "ar", "cs", "de", "el", "en", "es", "fa", "fr", "hu", "it", "ja", "ko", "nl", "pl", "pt", "ro", "ru", "sk", "sv", "th", "tr", "vi", "zh" ]
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/inline_response_200_3"
						}
					}
				},
				"security": [
					{
						"oauth": []
					}
				]
			}
		},
		"/accounts/{accountId}/orders": {
			"get": {
				"tags": [ "Trading Panel bridge (broker data & orders)", "Trading Panel bridge (orders only)", "Trading Terminal integration" ],
				"description": "Get pending orders for an account.",
				"parameters": [
					{
						"name": "accountId",
						"in": "path",
						"description": "The account identifier",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "List of pending orders. It is also expected that broker returns orders filled/cancelled/rejected during current session.",
						"schema": {
							"$ref": "#/definitions/inline_response_200_4"
						}
					}
				},
				"security": [
					{
						"oauth": []
					}
				]
			},
			"post": {
				"tags": [ "Trading Panel bridge (broker data & orders)", "Trading Panel bridge (orders only)", "Trading Terminal integration" ],
				"description": "Create a new order",
				"parameters": [
					{
						"name": "accountId",
						"in": "path",
						"description": "The account identifier",
						"required": true,
						"type": "string"
					},
					{
						"name": "instrument",
						"in": "formData",
						"description": "Instrument to open the order on",
						"required": true,
						"type": "string"
					},
					{
						"name": "qty",
						"in": "formData",
						"description": "The number of units to open order for",
						"required": true,
						"type": "number"
					},
					{
						"name": "side",
						"in": "formData",
						"description": "Side. Possible values &ndash; `buy` and `sell`.",
						"required": true,
						"type": "string",
						"enum": [ "buy", "sell" ]
					},
					{
						"name": "type",
						"in": "formData",
						"description": "Type. Possible values &ndash; `market`, `stop`, `limit`, `stoplimit`.",
						"required": true,
						"type": "string",
						"enum": [ "market", "stop", "limit", "stoplimit" ]
					},
					{
						"name": "limitPrice",
						"in": "formData",
						"description": "Limit Price for Limit or StopLimit order",
						"required": false,
						"type": "number"
					},
					{
						"name": "stopPrice",
						"in": "formData",
						"description": "Stop Price for Stop or StopLimit order",
						"required": false,
						"type": "number"
					},
					{
						"name": "durationType",
						"in": "formData",
						"description": "Duration ID (if supported)",
						"required": false,
						"type": "string"
					},
					{
						"name": "durationDateTime",
						"in": "formData",
						"description": "Expiration datetime UNIX timestamp (if supported by duration type)",
						"required": false,
						"type": "number"
					},
					{
						"name": "stopLoss",
						"in": "formData",
						"description": "StopLoss price (if supported)",
						"required": false,
						"type": "number"
					},
					{
						"name": "takeProfit",
						"in": "formData",
						"description": "TakeProfit price (if supported)",
						"required": false,
						"type": "number"
					},
					{
						"name": "digitalSignature",
						"in": "formData",
						"description": "Digital signature (if supported)",
						"required": false,
						"type": "string"
					},
					{
						"name": "requestId",
						"in": "query",
						"description": "Unique identifier for a request",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Status. `message` should be filled if erroneous. `orderId` should present if successful.",
						"schema": {
							"$ref": "#/definitions/inline_response_200_5"
						}
					}
				},
				"security": [
					{
						"oauth": []
					}
				]
			}
		},
		"/accounts/{accountId}/ordersHistory": {
			"get": {
				"tags": [ "Trading Panel bridge (broker data & orders)", "Trading Panel bridge (orders only)", "Trading Terminal integration" ],
				"description": "Get order history for an account. It is expected that returned orders will have a final status (rejected, filled, cancelled). This request is optional. If you don't support history of orders set `AccountFlags::supportOrdersHistory` to `false`.",
				"parameters": [
					{
						"name": "accountId",
						"in": "path",
						"description": "The account identifier",
						"required": true,
						"type": "string"
					},
					{
						"name": "maxCount",
						"in": "query",
						"description": "Maximum amount of orders to return",
						"required": false,
						"type": "number"
					}
				],
				"responses": {
					"200": {
						"description": "List of orders",
						"schema": {
							"$ref": "#/definitions/inline_response_200_4"
						}
					}
				},
				"security": [
					{
						"oauth": []
					}
				]
			}
		},
		"/accounts/{accountId}/orders/{orderId}": {
			"get": {
				"tags": [ "Trading Panel bridge (broker data & orders)", "Trading Panel bridge (orders only)", "Trading Terminal integration" ],
				"description": "Get an order for an account. It can be an active or historical order.",
				"parameters": [
					{
						"name": "accountId",
						"in": "path",
						"description": "The account identifier",
						"required": true,
						"type": "string"
					},
					{
						"name": "orderId",
						"in": "path",
						"description": "Order ID",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Order",
						"schema": {
							"$ref": "#/definitions/inline_response_200_6"
						}
					}
				},
				"security": [
					{
						"oauth": []
					}
				]
			},
			"put": {
				"tags": [ "Trading Panel bridge (broker data & orders)", "Trading Panel bridge (orders only)", "Trading Terminal integration" ],
				"description": "Modify an existing order",
				"parameters": [
					{
						"name": "accountId",
						"in": "path",
						"description": "The account identifier",
						"required": true,
						"type": "string"
					},
					{
						"name": "orderId",
						"in": "path",
						"description": "Order ID",
						"required": true,
						"type": "string"
					},
					{
						"name": "qty",
						"in": "formData",
						"description": "Number of units",
						"required": true,
						"type": "number"
					},
					{
						"name": "limitPrice",
						"in": "formData",
						"description": "Limit Price for Limit or StopLimit order",
						"required": false,
						"type": "number"
					},
					{
						"name": "stopPrice",
						"in": "formData",
						"description": "Stop Price for Stop or StopLimit order",
						"required": false,
						"type": "number"
					},
					{
						"name": "stopLoss",
						"in": "formData",
						"description": "StopLoss price (if supported)",
						"required": false,
						"type": "number"
					},
					{
						"name": "takeProfit",
						"in": "formData",
						"description": "TakeProfit price (if supported)",
						"required": false,
						"type": "number"
					},
					{
						"name": "digitalSignature",
						"in": "formData",
						"description": "Digital signature (if supported)",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/inline_response_200_7"
						}
					}
				},
				"security": [
					{
						"oauth": []
					}
				]
			},
			"delete": {
				"tags": [ "Trading Panel bridge (broker data & orders)", "Trading Panel bridge (orders only)", "Trading Terminal integration" ],
				"description": "Cancel an existing order",
				"parameters": [
					{
						"name": "accountId",
						"in": "path",
						"description": "The account identifier",
						"required": true,
						"type": "string"
					},
					{
						"name": "orderId",
						"in": "path",
						"description": "Order ID",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/inline_response_200_7"
						}
					}
				},
				"security": [
					{
						"oauth": []
					}
				]
			}
		},
		"/accounts/{accountId}/positions": {
			"get": {
				"tags": [ "Trading Panel bridge (broker data & orders)", "Trading Panel bridge (orders only)", "Trading Terminal integration" ],
				"description": "Get positions for an account",
				"parameters": [
					{
						"name": "accountId",
						"in": "path",
						"description": "The account identifier",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Array of positions",
						"schema": {
							"$ref": "#/definitions/inline_response_200_8"
						}
					}
				},
				"security": [
					{
						"oauth": []
					}
				]
			}
		},
		"/accounts/{accountId}/positions/{positionId}": {
			"get": {
				"tags": [ "Trading Panel bridge (broker data & orders)", "Trading Panel bridge (orders only)", "Trading Terminal integration" ],
				"description": "Get a position for an account",
				"parameters": [
					{
						"name": "accountId",
						"in": "path",
						"description": "The account identifier",
						"required": true,
						"type": "string"
					},
					{
						"name": "positionId",
						"in": "path",
						"description": "Position ID",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Position object",
						"schema": {
							"$ref": "#/definitions/inline_response_200_9"
						}
					}
				},
				"security": [
					{
						"oauth": []
					}
				]
			},
			"put": {
				"tags": [ "Trading Panel bridge (broker data & orders)", "Trading Panel bridge (orders only)", "Trading Terminal integration" ],
				"description": "Modify an existing position stop loss or take profit or both",
				"parameters": [
					{
						"name": "accountId",
						"in": "path",
						"description": "The account identifier",
						"required": true,
						"type": "string"
					},
					{
						"name": "positionId",
						"in": "path",
						"description": "Position ID",
						"required": true,
						"type": "string"
					},
					{
						"name": "stopLoss",
						"in": "formData",
						"description": "StopLoss price",
						"required": false,
						"type": "number"
					},
					{
						"name": "takeProfit",
						"in": "formData",
						"description": "TakeProfit price",
						"required": false,
						"type": "number"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/inline_response_200_7"
						}
					}
				},
				"security": [
					{
						"oauth": []
					}
				]
			},
			"delete": {
				"tags": [ "Trading Panel bridge (broker data & orders)", "Trading Panel bridge (orders only)", "Trading Terminal integration" ],
				"description": "Close an existing position",
				"parameters": [
					{
						"name": "accountId",
						"in": "path",
						"description": "The account identifier",
						"required": true,
						"type": "string"
					},
					{
						"name": "positionId",
						"in": "path",
						"description": "Position ID",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/inline_response_200_7"
						}
					}
				},
				"security": [
					{
						"oauth": []
					}
				]
			}
		},
		"/accounts/{accountId}/executions": {
			"get": {
				"tags": [ "Trading Panel bridge (broker data & orders)", "Trading Panel bridge (orders only)", "Trading Terminal integration" ],
				"description": "Get a list of executions (i.e. fills or trades) for an account and an instrument. Executions are displayed on a chart",
				"parameters": [
					{
						"name": "accountId",
						"in": "path",
						"description": "The account identifier",
						"required": true,
						"type": "string"
					},
					{
						"name": "instrument",
						"in": "query",
						"description": "Broker instrument name",
						"required": true,
						"type": "string"
					},
					{
						"name": "maxCount",
						"in": "query",
						"description": "Maximum count of executions to return",
						"required": false,
						"type": "number"
					}
				],
				"responses": {
					"200": {
						"description": "List of executions",
						"schema": {
							"$ref": "#/definitions/inline_response_200_10"
						}
					}
				},
				"security": [
					{
						"oauth": []
					}
				]
			}
		},
		"/accounts/{accountId}/instruments": {
			"get": {
				"tags": [ "Trading Panel bridge (broker data & orders)", "Trading Panel bridge (orders only)", "Trading Terminal integration" ],
				"description": "Get a list of tradeable instruments that are available for trading with the account specified",
				"parameters": [
					{
						"name": "accountId",
						"in": "path",
						"description": "The account identifier",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "List of instruments",
						"schema": {
							"$ref": "#/definitions/inline_response_200_11"
						}
					}
				},
				"security": [
					{
						"oauth": []
					}
				]
			}
		},
		"/mapping": {
			"get": {
				"tags": [ "Trading Panel bridge (broker data & orders)", "Trading Panel bridge (orders only)" ],
				"description": "Return all broker instruments with corresponding TradingView instruments. It is required to add a Broker to TradingView.com. It is not required for Trading Terminal integration. This request works without authorization!",
				"parameters": [],
				"responses": {
					"200": {
						"description": "Broker &ndash; TradingView instruments map",
						"schema": {
							"$ref": "#/definitions/SymbolMapping"
						}
					}
				}
			}
		},
		"/symbol_info": {
			"get": {
				"tags": [ "Trading Panel bridge (broker data & orders)", "Trading Terminal integration" ],
				"description": "Get a list of all instruments",
				"parameters": [],
				"responses": {
					"200": {
						"description": "List of instruments",
						"schema": {
							"$ref": "#/definitions/SymbolInfoArrays"
						}
					}
				},
				"security": [
					{
						"oauth": []
					}
				]
			}
		},
		"/history": {
			"get": {
				"tags": [ "Trading Panel bridge (broker data & orders)", "Trading Terminal integration" ],
				"description": "Bars request. You can find examples in the [documentation](https://github.com/tradingview/charting_library/wiki/UDF#bars).",
				"parameters": [
					{
						"name": "symbol",
						"in": "query",
						"description": "Symbol name or ticker",
						"required": true,
						"type": "string"
					},
					{
						"name": "resolution",
						"in": "query",
						"description": "Symbol resolution. Possible resolutions are daily (`1D`, `2D` ... ), weekly (`1W`, `2W` ...), monthly (`1M`, `2M`...) and an intra-day resolution &ndash; minutes(`1`, `2` ...).",
						"required": true,
						"type": "string"
					},
					{
						"name": "from",
						"in": "query",
						"description": "Unix timestamp (UTC) of the leftmost required bar, including `from`.",
						"required": true,
						"type": "number"
					},
					{
						"name": "to",
						"in": "query",
						"description": "Unix timestamp (UTC) of the rightmost required bar, including `to`.",
						"required": true,
						"type": "number"
					},
					{
						"name": "countback",
						"in": "query",
						"description": "Number of bars (higher priority than `from`) starting with `to`. If `countback` is set, `from` should be ignorred. It is used only by tradingview.com, Trading Terminal will never use it.",
						"required": false,
						"type": "number"
					}
				],
				"responses": {
					"200": {
						"description": "Response is expected to be an object with properties listed below. Each property is treated as a table column",
						"schema": {
							"$ref": "#/definitions/BarsArrays"
						}
					}
				},
				"security": [
					{
						"oauth": []
					}
				]
			}
		},
		"/marks": {
			"get": {
				"tags": [ "Trading Terminal integration" ],
				"description": "Request for bar marks (circles on top of bars). You can display custom marks only in the Trading Terminal",
				"parameters": [
					{
						"name": "symbol",
						"in": "query",
						"description": "Symbol name or ticker",
						"required": true,
						"type": "string"
					},
					{
						"name": "resolution",
						"in": "query",
						"description": "Symbol resolution. Possible resolutions are daily (`1D`, `2D` ... ), weekly (`1W`, `2W` ...), monthly (`1M`, `2M`...) and an intra-day resolution &ndash; minutes(`1`, `2` ...).",
						"required": true,
						"type": "string"
					},
					{
						"name": "from",
						"in": "query",
						"description": "Unix timestamp (UTC) of the leftmost required bar, including `from`.",
						"required": true,
						"type": "number"
					},
					{
						"name": "to",
						"in": "query",
						"description": "Unix timestamp (UTC) of the rightmost required bar, including `to`.",
						"required": true,
						"type": "number"
					}
				],
				"responses": {
					"200": {
						"description": "Response is expected to be an object with properties listed below. Each property is an array",
						"schema": {
							"$ref": "#/definitions/MarksArrays"
						}
					}
				},
				"security": [
					{
						"oauth": []
					}
				]
			}
		},
		"/timescale_marks": {
			"get": {
				"tags": [ "Trading Terminal integration" ],
				"description": "Request for timescale marks (circles on the timescale). You can display custom marks only in the Trading Terminal",
				"parameters": [
					{
						"name": "symbol",
						"in": "query",
						"description": "Symbol name or ticker",
						"required": true,
						"type": "string"
					},
					{
						"name": "resolution",
						"in": "query",
						"description": "Symbol resolution. Possible resolutions are daily (`1D`, `2D` ... ), weekly (`1W`, `2W` ...), monthly (`1M`, `2M`...) and an intra-day resolution &ndash; minutes(`1`, `2` ...).",
						"required": true,
						"type": "string"
					},
					{
						"name": "from",
						"in": "query",
						"description": "Unix timestamp (UTC) of the leftmost required bar, including `from`.",
						"required": true,
						"type": "number"
					},
					{
						"name": "to",
						"in": "query",
						"description": "Unix timestamp (UTC) of the rightmost required bar, including `to`.",
						"required": true,
						"type": "number"
					}
				],
				"responses": {
					"200": {
						"description": "Response is expected to be an array.",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/TimescaleMark"
							}
						}
					}
				},
				"security": [
					{
						"oauth": []
					}
				]
			}
		},
		"/quotes": {
			"get": {
				"tags": [ "Trading Panel bridge (broker data & orders)", "Trading Panel bridge (orders only)", "Trading Terminal integration" ],
				"description": "Get current prices of the instrument. You can see an example of this response [here](https://demo_feed.tradingview.com/quotes?symbols=AAPL%2CMSFT%2CIBM%2CNasdaqNM%3AAAPL).",
				"parameters": [
					{
						"name": "symbols",
						"in": "query",
						"description": "comma separated symbols",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Current prices",
						"schema": {
							"$ref": "#/definitions/inline_response_200_12"
						}
					}
				},
				"security": [
					{
						"oauth": []
					}
				]
			}
		},
		"/depth": {
			"get": {
				"tags": [ "Trading Panel bridge (broker data & orders)", "Trading Panel bridge (orders only)", "Trading Terminal integration" ],
				"description": "Get current depth of market for the instrument. Optional.",
				"parameters": [
					{
						"name": "symbol",
						"in": "query",
						"description": "instrument name",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Depth of market",
						"schema": {
							"$ref": "#/definitions/inline_response_200_13"
						}
					}
				},
				"security": [
					{
						"oauth": []
					}
				]
			}
		},
		"/streaming": {
			"get": {
				"tags": [ "Trading Panel bridge (broker data & orders)" ],
				"description": "Stream of prices. Server constantly keeps the connection alive. If the connection is broken the server constantly tries to restore it. Transfer mode is 'chunked encoding'. The data feed should set 'Transfer-Encoding: chunked' and make sure that all intermediate proxies are set to use this mode. All messages are finished with '\\n'. Streaming data should contain real-time only. It shouldn't contain snapshots of data.",
				"parameters": [],
				"responses": {
					"200": {
						"description": "Data feed should provide ticks (trades, asks, bids) and daily bars.\n\nIf there is no trades the data feed should set trades to bids.\n\nIf there is only ask/bid implementation you must also set the trade (same as bid but it's size must be >= 1).\n\nSize for trades is always >= 1 except for a correction. In case of correction size can be 0.\n\nAll times should be UNIX time UTC.\n\nDaily bars are required if they cannot be built from ticks (has_dwm should be set to true in the symbol information).\n\nFields for asks, bids and trades: `id`, `p`, `s` (optional for asks and bids), `t`, `f`.\n\nFields for daily bars: `id`, `t`, `o`, `h`, `l`, `c`, `v`.\n\nMessages:\n1. trade `{\"id\":\"symbol\",\"p\":price,\"s\":size,\"t\":time}`\n2. ask `{\"id\":\"symbol\",\"p\":price,\"s\":size,\"t\":time,\"f\":\"a\"}`\n3. bid `{\"id\":\"symbol\",\"p\":price,\"s\":size,\"t\":time,\"f\":\"b\"}`\n4. daily bar `{\"id\":\"symbol\",\"o\":open,\"h\":high,\"l\":low,\"c\":close,\"v\":volume,\"t\":time,\"f\":\"d\"}`\n",
						"schema": {
							"$ref": "#/definitions/inline_response_200_14"
						}
					}
				},
				"security": [
					{
						"oauth": []
					}
				]
			}
		}
	},
	"securityDefinitions": {
		"oauth": {
			"description": "Look for more request details in /authorize request. TradingView will set Authorization header to 'Bearer ' + access_token for all requests with authorization.",
			"type": "oauth2",
			"tokenUrl": "http://staging-paper-rest-api.tradingview.com/tradingview/v1/authorize",
			"flow": "password",
			"scopes": {
				"general": "permission to perform all requests"
			}
		}
	},
	"definitions": {
		"Status": {
			"type": "string",
			"enum": [ "ok", "error" ],
			"x-enum-string": true
		},
		"AuthorizationResponse": {
			"type": "object",
			"required": [ "access_token", "expiration" ],
			"properties": {
				"access_token": {
					"type": "string",
					"description": "Access token acts as a session ID that the application uses for making requests. This token should be protected as if it were user credentials"
				},
				"expiration": {
					"type": "number",
					"description": "The time when the token is expired is represented as the number of seconds since the Unix epoch (00:00:00 UTC on 1 January 1970)"
				}
			},
			"description": "Authorization Response",
			"example": {
				"access_token": "access_token",
				"expiration": 0.80082819046101150206595775671303272247314453125
			}
		},
		"ConfigResponse": {
			"type": "object",
			"properties": {
				"accountManager": {
					"type": "array",
					"description": "Localized account manager's tables configuration. Account Manager is a page in the bottom widget. This page can have multiple tables. Data of the tables is filled using `/state` response.",
					"items": {
						"$ref": "#/definitions/AccountManagerTable"
					}
				},
				"durations": {
					"type": "array",
					"description": "Localized array of durations displayed in Order Ticket",
					"items": {
						"$ref": "#/definitions/Duration"
					}
				},
				"pullingInterval": {
					"$ref": "#/definitions/PullingInterval"
				}
			},
			"example": {
				"pullingInterval": {
					"accountManager": 5.63737665663332876420099637471139430999755859375,
					"orders": 1.46581298050294517310021547018550336360931396484375,
					"positions": 5.962133916683182377482808078639209270477294921875,
					"history": 0.80082819046101150206595775671303272247314453125,
					"quotes": 6.02745618307040320615897144307382404804229736328125
				},
				"accountManager": [
					{
						"columns": [
							{
								"fixedWidth": true,
								"tooltip": "tooltip",
								"id": "id",
								"sortable": true,
								"title": "title"
							},
							{
								"fixedWidth": true,
								"tooltip": "tooltip",
								"id": "id",
								"sortable": true,
								"title": "title"
							}
						],
						"id": "id",
						"title": "title"
					},
					{
						"columns": [
							{
								"fixedWidth": true,
								"tooltip": "tooltip",
								"id": "id",
								"sortable": true,
								"title": "title"
							},
							{
								"fixedWidth": true,
								"tooltip": "tooltip",
								"id": "id",
								"sortable": true,
								"title": "title"
							}
						],
						"id": "id",
						"title": "title"
					}
				],
				"durations": [
					{
						"hasTimePicker": true,
						"hasDatePicker": true,
						"id": "id",
						"title": "title"
					},
					{
						"hasTimePicker": true,
						"hasDatePicker": true,
						"id": "id",
						"title": "title"
					}
				]
			}
		},
		"AccountStateResponse": {
			"type": "object",
			"required": [ "balance", "unrealizedPl" ],
			"properties": {
				"balance": {
					"type": "number",
					"description": "Account Balance"
				},
				"unrealizedPl": {
					"type": "number",
					"description": "Unrealized Profit/loss"
				},
				"equity": {
					"type": "number",
					"description": "Equity"
				},
				"amData": {
					"type": "array",
					"description": "Account Manager data. Structure of Account Manager is defined by `/config` response. Each element of this array is a table.",
					"items": {
						"type": "array",
						"description": "Single Account Manager table data. Each element of this array is a table row",
						"items": {
							"type": "array",
							"description": "Account Manager table rows data. Each element of this array is a table cell",
							"items": {
								"type": "string"
							}
						}
					}
				}
			},
			"example": {
				"amData": [
					[
						[ "amData", "amData" ],
						[ "amData", "amData" ]
					],
					[
						[ "amData", "amData" ],
						[ "amData", "amData" ]
					]
				],
				"unrealizedPl": 6.02745618307040320615897144307382404804229736328125,
				"balance": 0.80082819046101150206595775671303272247314453125,
				"equity": 1.46581298050294517310021547018550336360931396484375
			}
		},
		"Duration": {
			"type": "object",
			"required": [ "id", "title" ],
			"properties": {
				"id": {
					"type": "string"
				},
				"title": {
					"type": "string",
					"description": "Localized title"
				},
				"hasDatePicker": {
					"type": "boolean",
					"description": "Display date control in Order Ticket for this duration type"
				},
				"hasTimePicker": {
					"type": "boolean",
					"description": "Display time control in Order Ticket for this duration type"
				}
			},
			"description": "Single duration option",
			"example": {
				"hasTimePicker": true,
				"hasDatePicker": true,
				"id": "id",
				"title": "title"
			}
		},
		"AccountManagerTable": {
			"type": "object",
			"required": [ "columns", "id", "title" ],
			"properties": {
				"id": {
					"type": "string"
				},
				"title": {
					"type": "string",
					"description": "Localized title of a table"
				},
				"columns": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/AccountManagerColumn"
					}
				}
			},
			"example": {
				"columns": [
					{
						"fixedWidth": true,
						"tooltip": "tooltip",
						"id": "id",
						"sortable": true,
						"title": "title"
					},
					{
						"fixedWidth": true,
						"tooltip": "tooltip",
						"id": "id",
						"sortable": true,
						"title": "title"
					}
				],
				"id": "id",
				"title": "title"
			}
		},
		"AccountManagerColumn": {
			"type": "object",
			"required": [ "id", "title" ],
			"properties": {
				"id": {
					"type": "string"
				},
				"title": {
					"type": "string",
					"description": "Localized title of a column"
				},
				"tooltip": {
					"type": "string",
					"description": "Tooltip that is shown on mouse hover"
				},
				"fixedWidth": {
					"type": "boolean",
					"description": "Set it to true if data length is frequently changed"
				},
				"sortable": {
					"type": "boolean",
					"description": "Set it to false if this columns data should not be sortable"
				}
			},
			"example": {
				"fixedWidth": true,
				"tooltip": "tooltip",
				"id": "id",
				"sortable": true,
				"title": "title"
			}
		},
		"Account": {
			"type": "object",
			"required": [ "config", "id", "name" ],
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string",
					"description": "Account title that is displayed to a user"
				},
				"currency": {
					"type": "string",
					"description": "Abbreviation of account currency"
				},
				"currencySign": {
					"type": "string",
					"description": "Account currency symbol"
				},
				"config": {
					"$ref": "#/definitions/AccountFlags"
				}
			},
			"example": {
				"currencySign": "currencySign",
				"name": "name",
				"currency": "currency",
				"id": "id",
				"config": {
					"supportLevel2Data": true,
					"supportBrackets": true,
					"supportPLUpdate": true,
					"supportClosePosition": true,
					"supportExecutions": true,
					"supportEditAmount": true,
					"supportPositionBrackets": true,
					"supportReducePosition": true,
					"showQuantityInsteadOfAmount": true,
					"supportOrderBrackets": true,
					"supportDigitalSignature": true,
					"supportStopLimitOrders": true,
					"supportMultiposition": true,
					"supportDOM": true,
					"supportOrdersHistory": true
				}
			}
		},
		"AccountFlags": {
			"type": "object",
			"properties": {
				"showQuantityInsteadOfAmount": {
					"type": "boolean",
					"description": "Renames Amount to Quantity in the Order Ticket"
				},
				"supportDOM": {
					"type": "boolean",
					"description": "Whether you want for DOM (Depth of market) widget to be available"
				},
				"supportBrackets": {
					"type": "boolean",
					"description": "Whether you support brackets. Deprecated. Use supportOrderBrackets and supportPositionBrackets instead."
				},
				"supportOrderBrackets": {
					"type": "boolean",
					"description": "Whether you support adding (or modifying) stop loss and take profit to orders"
				},
				"supportPositionBrackets": {
					"type": "boolean",
					"description": "Whether you support adding (or modifying) stop loss and take profit to positions"
				},
				"supportClosePosition": {
					"type": "boolean",
					"description": "Whether you support closing of a position without a need for a user to fill an order. If it is `true` the Trading Terminal shows a confirmation dialog and sends a DELETE request instead of bringing up an order ticket."
				},
				"supportEditAmount": {
					"type": "boolean",
					"description": "Whether you support editing orders quantity. If you set it to `false`, the quantity control in the order ticket will be disabled when modifing an order."
				},
				"supportLevel2Data": {
					"type": "boolean",
					"description": "Whether you support Level 2 data. It is required to display DOM levels. You must implement `/streaming` to display DOM."
				},
				"supportMultiposition": {
					"type": "boolean",
					"description": "Whether you support multiple positions at one instrument at the same time"
				},
				"supportPLUpdate": {
					"type": "boolean",
					"description": "Whether you provide `unrealizedPl` for positions. Otherwise P&L will be calculated automatically based on a simple algorithm"
				},
				"supportReducePosition": {
					"type": "boolean",
					"description": "Reserved for future use"
				},
				"supportStopLimitOrders": {
					"type": "boolean",
					"description": "Whether you support StopLimit orders"
				},
				"supportOrdersHistory": {
					"type": "boolean",
					"description": "Whether you support /ordersHistory request"
				},
				"supportExecutions": {
					"type": "boolean",
					"description": "Whether you support /executions request"
				},
				"supportDigitalSignature": {
					"type": "boolean",
					"description": "Whether you support Digital signature input field in the Order Ticket"
				}
			},
			"example": {
				"supportLevel2Data": true,
				"supportBrackets": true,
				"supportPLUpdate": true,
				"supportClosePosition": true,
				"supportExecutions": true,
				"supportEditAmount": true,
				"supportPositionBrackets": true,
				"supportReducePosition": true,
				"showQuantityInsteadOfAmount": true,
				"supportOrderBrackets": true,
				"supportDigitalSignature": true,
				"supportStopLimitOrders": true,
				"supportMultiposition": true,
				"supportDOM": true,
				"supportOrdersHistory": true
			}
		},
		"Instrument": {
			"type": "object",
			"required": [ "description", "name" ],
			"properties": {
				"name": {
					"type": "string",
					"description": "Broker instrument name"
				},
				"description": {
					"type": "string",
					"description": "Instrument description"
				},
				"minQty": {
					"type": "number",
					"description": "Minimum quantity for trading"
				},
				"maxQty": {
					"type": "number",
					"description": "Maximum quantity for trading"
				},
				"qtyStep": {
					"type": "number",
					"description": "Quantity step"
				},
				"pipSize": {
					"type": "number",
					"description": "Size of 1 pip. It is equal to minTick for non-forex symbols. For forex pairs it equals either the minTick, or the minTick multiplied by 10. For example, for EURCAD minTick is 0.00001 and pipSize is 0.0001"
				},
				"pipValue": {
					"type": "number",
					"description": "Value of 1 pip in account currency"
				},
				"minTick": {
					"type": "number",
					"description": "Minimum price movement"
				},
				"lotSize": {
					"type": "number",
					"description": "Size of 1 lot"
				}
			},
			"example": {
				"qtyStep": 1.46581298050294517310021547018550336360931396484375,
				"pipSize": 5.962133916683182377482808078639209270477294921875,
				"pipValue": 5.63737665663332876420099637471139430999755859375,
				"minTick": 2.3021358869347654518833223846741020679473876953125,
				"lotSize": 7.061401241503109105224211816675961017608642578125,
				"name": "name",
				"description": "description",
				"maxQty": 6.02745618307040320615897144307382404804229736328125,
				"minQty": 0.80082819046101150206595775671303272247314453125
			}
		},
		"Order": {
			"type": "object",
			"required": [ "id", "instrument", "qty", "side", "status", "type" ],
			"properties": {
				"id": {
					"type": "string"
				},
				"instrument": {
					"type": "string",
					"description": "Instrument name that is used on a broker's side"
				},
				"qty": {
					"type": "number",
					"description": "Quantity"
				},
				"side": {
					"type": "string",
					"description": "Side. Possible values &ndash; \"buy\" and \"sell\".",
					"enum": [ "buy", "sell" ]
				},
				"type": {
					"type": "string",
					"description": "Type. Possible values &ndash; \"market\", \"stop\", \"limit\", \"stoplimit\".",
					"enum": [ "market", "stop", "limit", "stoplimit" ]
				},
				"filledQty": {
					"type": "number",
					"description": "Filled quantity."
				},
				"avgPrice": {
					"type": "number",
					"description": "Average price of order fills. It should be provided for filled / partly filled orders."
				},
				"limitPrice": {
					"type": "number",
					"description": "Limit Price for Limit or StopLimit order."
				},
				"stopPrice": {
					"type": "number",
					"description": "Stop Price for Stop or StopLimit order."
				},
				"parentId": {
					"type": "string",
					"description": "Identifier of a parent order or a parent position (for position brackets) depending on `parentType`. Should be set only for bracket orders."
				},
				"parentType": {
					"type": "string",
					"description": "Type of order's parent. Should be set only for bracket orders.",
					"enum": [ "order", "position" ]
				},
				"duration": {
					"$ref": "#/definitions/Order_duration"
				},
				"status": {
					"type": "string",
					"description": "String constants to describe an order status.\n\n`Status`  | Description\n----------|-------------\nplacing   | order is not created on a broker's side yet\ninactive  | bracket order is created but waiting for a base order to be filled\nworking   | order is created but not executed yet\nrejected  | order is rejected for some reason\nfilled    | order is fully executed\ncancelled  | order is cancelled\n",
					"enum": [ "placing", "inactive", "working", "rejected", "filled", "cancelled" ]
				}
			},
			"example": {
				"side": "buy",
				"limitPrice": 5.962133916683182377482808078639209270477294921875,
				"avgPrice": 1.46581298050294517310021547018550336360931396484375,
				"instrument": "instrument",
				"type": "market",
				"parentId": "parentId",
				"parentType": "order",
				"duration": {
					"datetime": 2.3021358869347654518833223846741020679473876953125,
					"type": "type"
				},
				"stopPrice": 5.63737665663332876420099637471139430999755859375,
				"qty": 0.80082819046101150206595775671303272247314453125,
				"id": "id",
				"filledQty": 6.02745618307040320615897144307382404804229736328125,
				"status": "placing"
			}
		},
		"Position": {
			"type": "object",
			"required": [ "avgPrice", "id", "instrument", "qty", "side", "unrealizedPl" ],
			"properties": {
				"id": {
					"type": "string"
				},
				"instrument": {
					"type": "string",
					"description": "Instrument name that is used on a broker's side"
				},
				"qty": {
					"type": "number",
					"description": "Quantity"
				},
				"side": {
					"type": "string",
					"description": "Side. Possible values &ndash; \"buy\" and \"sell\".",
					"enum": [ "buy", "sell" ]
				},
				"avgPrice": {
					"type": "number",
					"description": "Average price of position trades"
				},
				"unrealizedPl": {
					"type": "number",
					"description": "Unrealized (open) profit/loss"
				}
			},
			"example": {
				"side": "buy",
				"unrealizedPl": 1.46581298050294517310021547018550336360931396484375,
				"avgPrice": 6.02745618307040320615897144307382404804229736328125,
				"qty": 0.80082819046101150206595775671303272247314453125,
				"instrument": "instrument",
				"id": "id"
			}
		},
		"Execution": {
			"type": "object",
			"required": [ "id", "instrument", "price", "qty", "side", "time" ],
			"properties": {
				"id": {
					"type": "string",
					"description": "Unique identifier"
				},
				"instrument": {
					"type": "string",
					"description": "Instrument id"
				},
				"price": {
					"type": "number",
					"description": "Execution price"
				},
				"time": {
					"type": "number",
					"description": "Execution time"
				},
				"qty": {
					"type": "number",
					"description": "Execution quantity"
				},
				"side": {
					"type": "string",
					"description": "Side. Possible values &ndash; \"buy\" and \"sell\".",
					"enum": [ "buy", "sell" ]
				}
			},
			"example": {
				"side": "buy",
				"price": 0.80082819046101150206595775671303272247314453125,
				"qty": 1.46581298050294517310021547018550336360931396484375,
				"instrument": "instrument",
				"id": "id",
				"time": 6.02745618307040320615897144307382404804229736328125
			}
		},
		"SymbolInfoArrays": {
			"type": "object",
			"required": [ "description", "exchange-listed", "exchange-traded", "minmovement", "pricescale", "session-regular", "symbol", "timezone" ],
			"properties": {
				"symbol": {
					"type": "array",
					"description": "It's name of a symbol. It is a string which your users will see. Also, it will be used for data requests if you are not using tickers.",
					"items": {
						"type": "string"
					}
				},
				"description": {
					"type": "array",
					"description": "Description of a symbol. Will be printed in chart legend for this symbol.",
					"items": {
						"type": "string"
					}
				},
				"exchange-listed": {
					"type": "array",
					"description": "Short name of exchange where this symbol is listed",
					"items": {
						"type": "string"
					}
				},
				"exchange-traded": {
					"type": "array",
					"description": "Short name of exchange where this symbol is traded",
					"items": {
						"type": "string"
					}
				},
				"minmovement": {
					"type": "array",
					"description": "Minimal integer price change",
					"items": {
						"type": "number"
					}
				},
				"minmov2": {
					"type": "array",
					"description": "It's a number for complex price formatting cases",
					"items": {
						"type": "number"
					}
				},
				"fractional": {
					"type": "array",
					"description": "Boolean showing whether this symbol wants to have complex price formatting (see minmov2) or not",
					"items": {
						"type": "boolean"
					}
				},
				"pricescale": {
					"type": "array",
					"description": "MinimalPossiblePriceChange = minmovement / pricescale",
					"items": {
						"type": "number"
					}
				},
				"has-intraday": {
					"type": "array",
					"description": "Boolean showing whether symbol has intraday (minutes) history data. If it's false then all buttons for intradays resolutions will be disabled when this symbol is active in chart. If it is set to true, all resolutions that are supplied directly by the datafeed must be provided in intraday_multipliers array.",
					"items": {
						"type": "boolean"
					}
				},
				"has-no-volume": {
					"type": "array",
					"description": "Boolean showing whether symbol has volume data or not",
					"items": {
						"type": "boolean"
					}
				},
				"type": {
					"type": "array",
					"description": "Symbol type (forex/stock etc.)",
					"items": {
						"type": "string"
					}
				},
				"ticker": {
					"type": "array",
					"description": "It's an unique identifier for this symbol in your symbology. If you specify this property then its value will be used for all data requests for this symbol. ticker is treated to be equal to symbol if not specified explicitly.",
					"items": {
						"type": "string"
					}
				},
				"timezone": {
					"type": "array",
					"description": "Exchange timezone for this symbol. We expect to get name of time zone in olsondb format",
					"items": {
						"type": "string"
					}
				},
				"session-regular": {
					"type": "array",
					"description": "Trading hours for this symbol. See the [Trading Sessions](https://github.com/tradingview/charting_library/wiki/Trading-Sessions) article to know more details.",
					"items": {
						"type": "string"
					}
				},
				"supported-resolutions": {
					"type": "array",
					"description": "An array of resolutions which should be enabled in resolutions picker for this symbol. Each item of an array is expected to be a string.",
					"items": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				},
				"has-daily": {
					"type": "array",
					"description": "The boolean value showing whether datafeed has its own D resolution bars or not. If has_daily = false then Charting Library will build respective resolutions from intraday by itself. If not, then it will request those bars from datafeed.",
					"items": {
						"type": "boolean"
					}
				},
				"intraday-multipliers": {
					"type": "array",
					"description": "It is an array containing intraday resolutions (in minutes) the datafeed wants to build by itself. E.g., if the datafeed reported he supports resolutions [\"1\", \"5\", \"15\"], but in fact it has only 1 minute bars for symbol X, it should set intraday_multipliers of X = [1]. This will make Charting Library to build 5 and 15 resolutions by itself.",
					"items": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				},
				"has-weekly-and-monthly": {
					"type": "array",
					"description": "The boolean value showing whether datafeed has its own W and M resolution bars or not. If has_weekly_and_monthly = false then Charting Library will build respective resolutions from D by itself. If not, then it will request those bars from datafeed.",
					"items": {
						"type": "boolean"
					}
				}
			},
			"description": "SymbolInfo is an object containing symbols metadata. Each value of this object is an array of values which size is equal to symbols count or a single value that is applied to all symbols.",
			"example": {
				"symbol": [ "symbol", "symbol" ],
				"supported-resolutions": [
					[ "supported-resolutions", "supported-resolutions" ],
					[ "supported-resolutions", "supported-resolutions" ]
				],
				"ticker": [ "ticker", "ticker" ],
				"has-daily": [ true, true ],
				"minmov2": [ 6.02745618307040320615897144307382404804229736328125, 6.02745618307040320615897144307382404804229736328125 ],
				"has-weekly-and-monthly": [ true, true ],
				"timezone": [ "timezone", "timezone" ],
				"fractional": [ true, true ],
				"description": [ "description", "description" ],
				"intraday-multipliers": [
					[ "intraday-multipliers", "intraday-multipliers" ],
					[ "intraday-multipliers", "intraday-multipliers" ]
				],
				"type": [ "type", "type" ],
				"has-no-volume": [ true, true ],
				"exchange-listed": [ "exchange-listed", "exchange-listed" ],
				"has-intraday": [ true, true ],
				"exchange-traded": [ "exchange-traded", "exchange-traded" ],
				"minmovement": [ 0.80082819046101150206595775671303272247314453125, 0.80082819046101150206595775671303272247314453125 ],
				"pricescale": [ 1.46581298050294517310021547018550336360931396484375, 1.46581298050294517310021547018550336360931396484375 ],
				"session-regular": [ "session-regular", "session-regular" ]
			}
		},
		"BarsArrays": {
			"type": "object",
			"required": [ "s" ],
			"properties": {
				"s": {
					"type": "string",
					"description": "Status code.",
					"enum": [ "ok", "error", "no_data" ]
				},
				"errmsg": {
					"type": "string",
					"description": "Error message. Should be provided if s = \"error\""
				},
				"nb": {
					"type": "number",
					"description": "unix time of the next bar if there is no data (status code is no_data) in the requested period (optional)"
				},
				"t": {
					"type": "array",
					"description": "bar time, unix timestamp (UTC). Daily bars should only have the date part, time should be 0.",
					"items": {
						"type": "number"
					}
				},
				"o": {
					"type": "array",
					"description": "open price",
					"items": {
						"type": "number"
					}
				},
				"h": {
					"type": "array",
					"description": "high price",
					"items": {
						"type": "number"
					}
				},
				"l": {
					"type": "array",
					"description": "low price",
					"items": {
						"type": "number"
					}
				},
				"c": {
					"type": "array",
					"description": "close price",
					"items": {
						"type": "number"
					}
				},
				"v": {
					"type": "array",
					"description": "volume",
					"items": {
						"type": "number"
					}
				}
			},
			"description": "Bars data.",
			"example": {
				"s": "ok",
				"c": [ 2.3021358869347654518833223846741020679473876953125, 2.3021358869347654518833223846741020679473876953125 ],
				"nb": 0.80082819046101150206595775671303272247314453125,
				"t": [ 6.02745618307040320615897144307382404804229736328125, 6.02745618307040320615897144307382404804229736328125 ],
				"v": [ 7.061401241503109105224211816675961017608642578125, 7.061401241503109105224211816675961017608642578125 ],
				"h": [ 5.962133916683182377482808078639209270477294921875, 5.962133916683182377482808078639209270477294921875 ],
				"errmsg": "errmsg",
				"l": [ 5.63737665663332876420099637471139430999755859375, 5.63737665663332876420099637471139430999755859375 ],
				"o": [ 1.46581298050294517310021547018550336360931396484375, 1.46581298050294517310021547018550336360931396484375 ]
			}
		},
		"MarksArrays": {
			"type": "object",
			"required": [ "id", "label", "time" ],
			"properties": {
				"id": {
					"type": "array",
					"description": "Unique identifiers of marks.",
					"items": {
						"type": "number"
					}
				},
				"time": {
					"type": "array",
					"description": "bar time, unix timestamp (UTC)",
					"items": {
						"type": "number"
					}
				},
				"color": {
					"type": "array",
					"description": "Mark colors",
					"items": {
						"type": "string"
					}
				},
				"text": {
					"type": "array",
					"description": "mark popup text. HTML supported",
					"items": {
						"type": "string"
					}
				},
				"label": {
					"type": "array",
					"description": "a letter to be printed on a mark. Single character",
					"items": {
						"type": "string"
					}
				},
				"labelFontColor": {
					"type": "array",
					"description": "color of a letter on a mark",
					"items": {
						"type": "string"
					}
				},
				"minSize": {
					"type": "array",
					"description": "minimal size of mark (diameter, pixels)",
					"items": {
						"type": "number"
					}
				}
			},
			"description": "Bar marks data.",
			"example": {
				"color": [ "color", "color" ],
				"labelFontColor": [ "labelFontColor", "labelFontColor" ],
				"minSize": [ 1.46581298050294517310021547018550336360931396484375, 1.46581298050294517310021547018550336360931396484375 ],
				"id": [ 0.80082819046101150206595775671303272247314453125, 0.80082819046101150206595775671303272247314453125 ],
				"time": [ 6.02745618307040320615897144307382404804229736328125, 6.02745618307040320615897144307382404804229736328125 ],
				"text": [ "text", "text" ],
				"label": [ "label", "label" ]
			}
		},
		"TimescaleMark": {
			"type": "object",
			"required": [ "id", "label", "time" ],
			"properties": {
				"id": {
					"type": "string",
					"description": "Unique identifier of marks"
				},
				"time": {
					"type": "number",
					"description": "bar time, unix timestamp (UTC)"
				},
				"color": {
					"type": "string",
					"description": "Mark color",
					"enum": [ "red", "green", "blue", "yellow" ]
				},
				"tooltip": {
					"type": "string",
					"description": "Tooltip text"
				},
				"label": {
					"type": "string",
					"description": "A letter to be printed on a mark. Single character"
				}
			},
			"description": "Timescale marks data.",
			"example": {
				"color": "red",
				"tooltip": "tooltip",
				"id": "id",
				"time": 0.80082819046101150206595775671303272247314453125,
				"label": "label"
			}
		},
		"QuotesResponse": {
			"type": "object",
			"required": [ "n", "s", "v" ],
			"properties": {
				"s": {
					"$ref": "#/definitions/Status"
				},
				"n": {
					"type": "string",
					"description": "Symbol name. Should be equal to the requested one"
				},
				"v": {
					"$ref": "#/definitions/SingleQuote"
				}
			},
			"description": "Price response for an instrument",
			"example": {
				"s": null,
				"v": {
					"volume": 2.027123023002321833274663731572218239307403564453125,
					"lp": 1.46581298050294517310021547018550336360931396484375,
					"ch": 0.80082819046101150206595775671303272247314453125,
					"ask": 5.962133916683182377482808078639209270477294921875,
					"high_price": 7.061401241503109105224211816675961017608642578125,
					"chp": 6.02745618307040320615897144307382404804229736328125,
					"bid": 5.63737665663332876420099637471139430999755859375,
					"open_price": 2.3021358869347654518833223846741020679473876953125,
					"low_price": 9.301444243932575517419536481611430644989013671875,
					"prev_close_price": 3.61607674925191080461672754609026014804840087890625
				},
				"n": "n"
			}
		},
		"Depth": {
			"type": "object",
			"required": [ "asks", "bids" ],
			"properties": {
				"asks": {
					"type": "array",
					"description": "Array of Asks",
					"items": {
						"$ref": "#/definitions/DepthItem"
					}
				},
				"bids": {
					"type": "array",
					"description": "Array of Bids",
					"items": {
						"$ref": "#/definitions/DepthItem"
					}
				}
			},
			"description": "Depth of market for an instrument",
			"example": {
				"asks": [ "", "" ],
				"bids": [ "", "" ]
			}
		},
		"DepthItem": {
			"type": "array",
			"description": "Array with two numeric elements - price and volume. Example - `[45.10, 100]`.",
			"items": {
				"type": "number"
			}
		},
		"SingleQuote": {
			"type": "object",
			"properties": {
				"ch": {
					"type": "number",
					"description": "Change (displayed in Watch and Detail)"
				},
				"chp": {
					"type": "number",
					"description": "Change percent (displayed in Watch and Detail)"
				},
				"lp": {
					"type": "number",
					"description": "Last price"
				},
				"ask": {
					"type": "number",
					"description": "Ask price"
				},
				"bid": {
					"type": "number",
					"description": "Bid price"
				},
				"open_price": {
					"type": "number",
					"description": "Open"
				},
				"high_price": {
					"type": "number",
					"description": "High price"
				},
				"low_price": {
					"type": "number",
					"description": "Low price"
				},
				"prev_close_price": {
					"type": "number",
					"description": "Previous close price"
				},
				"volume": {
					"type": "number",
					"description": "Volume"
				}
			},
			"description": "Price data for an instrument",
			"example": {
				"volume": 2.027123023002321833274663731572218239307403564453125,
				"lp": 1.46581298050294517310021547018550336360931396484375,
				"ch": 0.80082819046101150206595775671303272247314453125,
				"ask": 5.962133916683182377482808078639209270477294921875,
				"high_price": 7.061401241503109105224211816675961017608642578125,
				"chp": 6.02745618307040320615897144307382404804229736328125,
				"bid": 5.63737665663332876420099637471139430999755859375,
				"open_price": 2.3021358869347654518833223846741020679473876953125,
				"low_price": 9.301444243932575517419536481611430644989013671875,
				"prev_close_price": 3.61607674925191080461672754609026014804840087890625
			}
		},
		"SymbolMapping": {
			"type": "object",
			"properties": {
				"symbols": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/SingleMapping"
					}
				},
				"fields": {
					"type": "array",
					"description": "Array with the only one element `['brokerSymbol']`.",
					"items": {
						"$ref": "#/definitions/SingleField"
					}
				}
			},
			"description": "Map of Broker instrument names and TradingView instrument names",
			"example": {
				"fields": [
					{},
					{}
				],
				"symbols": [
					{
						"s": "s",
						"f": [ "f", "f" ]
					},
					{
						"s": "s",
						"f": [ "f", "f" ]
					}
				]
			}
		},
		"SingleField": {
			"type": "string",
			"description": "Constant. Set it to \"brokerSymbol\".",
			"enum": [ "brokerSymbol" ],
			"x-enum-string": true
		},
		"SingleMapping": {
			"type": "object",
			"properties": {
				"f": {
					"type": "array",
					"description": "An array with the only one string element &ndash; broker symbol name",
					"items": {
						"type": "string"
					}
				},
				"s": {
					"type": "string",
					"description": "TradingView symbol name with prefix (AA:XXXX)"
				}
			},
			"description": "Map of Broker instrument name to TradingView instrument name",
			"example": {
				"s": "s",
				"f": [ "f", "f" ]
			}
		},
		"PullingInterval": {
			"type": "object",
			"properties": {
				"history": {
					"type": "number",
					"description": "Time interval in milliseconds that Trading Terminal uses to request chart real-time bar udpates. Default value is 500 ms"
				},
				"quotes": {
					"type": "number",
					"description": "Time interval in milliseconds that Trading Terminal uses to request quote udpates. Default value is 500 ms"
				},
				"orders": {
					"type": "number",
					"description": "Time interval in milliseconds that Trading Terminal uses to request orders. Default value is 500 ms"
				},
				"positions": {
					"type": "number",
					"description": "Time interval in milliseconds that Trading Terminal uses to request positions. Default value is 1000 ms"
				},
				"accountManager": {
					"type": "number",
					"description": "Time interval in milliseconds that Trading Terminal uses to update Account Manager tables. Default value is 500 ms"
				}
			},
			"description": "Time intervals in milliseconds that Trading Terminal uses to pull data from the server",
			"example": {
				"accountManager": 5.63737665663332876420099637471139430999755859375,
				"orders": 1.46581298050294517310021547018550336360931396484375,
				"positions": 5.962133916683182377482808078639209270477294921875,
				"history": 0.80082819046101150206595775671303272247314453125,
				"quotes": 6.02745618307040320615897144307382404804229736328125
			}
		},
		"inline_response_200": {
			"required": [ "s" ],
			"properties": {
				"s": {
					"$ref": "#/definitions/Status"
				},
				"errmsg": {
					"type": "string"
				},
				"d": {
					"$ref": "#/definitions/AuthorizationResponse"
				}
			},
			"example": {
				"s": {},
				"d": {
					"access_token": "access_token",
					"expiration": 0.80082819046101150206595775671303272247314453125
				},
				"errmsg": "errmsg"
			}
		},
		"inline_response_200_1": {
			"required": [ "s" ],
			"properties": {
				"s": {
					"$ref": "#/definitions/Status"
				},
				"errmsg": {
					"type": "string"
				},
				"d": {
					"$ref": "#/definitions/ConfigResponse"
				}
			},
			"example": {
				"s": {},
				"d": {
					"pullingInterval": {
						"accountManager": 5.63737665663332876420099637471139430999755859375,
						"orders": 1.46581298050294517310021547018550336360931396484375,
						"positions": 5.962133916683182377482808078639209270477294921875,
						"history": 0.80082819046101150206595775671303272247314453125,
						"quotes": 6.02745618307040320615897144307382404804229736328125
					},
					"accountManager": [
						{
							"columns": [
								{
									"fixedWidth": true,
									"tooltip": "tooltip",
									"id": "id",
									"sortable": true,
									"title": "title"
								},
								{
									"fixedWidth": true,
									"tooltip": "tooltip",
									"id": "id",
									"sortable": true,
									"title": "title"
								}
							],
							"id": "id",
							"title": "title"
						},
						{
							"columns": [
								{
									"fixedWidth": true,
									"tooltip": "tooltip",
									"id": "id",
									"sortable": true,
									"title": "title"
								},
								{
									"fixedWidth": true,
									"tooltip": "tooltip",
									"id": "id",
									"sortable": true,
									"title": "title"
								}
							],
							"id": "id",
							"title": "title"
						}
					],
					"durations": [
						{
							"hasTimePicker": true,
							"hasDatePicker": true,
							"id": "id",
							"title": "title"
						},
						{
							"hasTimePicker": true,
							"hasDatePicker": true,
							"id": "id",
							"title": "title"
						}
					]
				},
				"errmsg": "errmsg"
			}
		},
		"inline_response_200_2": {
			"required": [ "s" ],
			"properties": {
				"s": {
					"$ref": "#/definitions/Status"
				},
				"errmsg": {
					"type": "string"
				},
				"d": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Account"
					}
				}
			},
			"example": {
				"s": {},
				"d": [
					{
						"currencySign": "currencySign",
						"name": "name",
						"currency": "currency",
						"id": "id",
						"config": {
							"supportLevel2Data": true,
							"supportBrackets": true,
							"supportPLUpdate": true,
							"supportClosePosition": true,
							"supportExecutions": true,
							"supportEditAmount": true,
							"supportPositionBrackets": true,
							"supportReducePosition": true,
							"showQuantityInsteadOfAmount": true,
							"supportOrderBrackets": true,
							"supportDigitalSignature": true,
							"supportStopLimitOrders": true,
							"supportMultiposition": true,
							"supportDOM": true,
							"supportOrdersHistory": true
						}
					},
					{
						"currencySign": "currencySign",
						"name": "name",
						"currency": "currency",
						"id": "id",
						"config": {
							"supportLevel2Data": true,
							"supportBrackets": true,
							"supportPLUpdate": true,
							"supportClosePosition": true,
							"supportExecutions": true,
							"supportEditAmount": true,
							"supportPositionBrackets": true,
							"supportReducePosition": true,
							"showQuantityInsteadOfAmount": true,
							"supportOrderBrackets": true,
							"supportDigitalSignature": true,
							"supportStopLimitOrders": true,
							"supportMultiposition": true,
							"supportDOM": true,
							"supportOrdersHistory": true
						}
					}
				],
				"errmsg": "errmsg"
			}
		},
		"inline_response_200_3": {
			"required": [ "s" ],
			"properties": {
				"s": {
					"$ref": "#/definitions/Status"
				},
				"errmsg": {
					"type": "string"
				},
				"d": {
					"$ref": "#/definitions/AccountStateResponse"
				}
			},
			"example": {
				"s": {},
				"d": {
					"amData": [
						[
							[ "amData", "amData" ],
							[ "amData", "amData" ]
						],
						[
							[ "amData", "amData" ],
							[ "amData", "amData" ]
						]
					],
					"unrealizedPl": 6.02745618307040320615897144307382404804229736328125,
					"balance": 0.80082819046101150206595775671303272247314453125,
					"equity": 1.46581298050294517310021547018550336360931396484375
				},
				"errmsg": "errmsg"
			}
		},
		"inline_response_200_4": {
			"required": [ "s" ],
			"properties": {
				"s": {
					"$ref": "#/definitions/Status"
				},
				"errmsg": {
					"type": "string"
				},
				"d": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Order"
					}
				}
			},
			"example": {
				"s": {},
				"d": [
					{
						"side": "buy",
						"limitPrice": 5.962133916683182377482808078639209270477294921875,
						"avgPrice": 1.46581298050294517310021547018550336360931396484375,
						"instrument": "instrument",
						"type": "market",
						"parentId": "parentId",
						"parentType": "order",
						"duration": {
							"datetime": 2.3021358869347654518833223846741020679473876953125,
							"type": "type"
						},
						"stopPrice": 5.63737665663332876420099637471139430999755859375,
						"qty": 0.80082819046101150206595775671303272247314453125,
						"id": "id",
						"filledQty": 6.02745618307040320615897144307382404804229736328125,
						"status": "placing"
					},
					{
						"side": "buy",
						"limitPrice": 5.962133916683182377482808078639209270477294921875,
						"avgPrice": 1.46581298050294517310021547018550336360931396484375,
						"instrument": "instrument",
						"type": "market",
						"parentId": "parentId",
						"parentType": "order",
						"duration": {
							"datetime": 2.3021358869347654518833223846741020679473876953125,
							"type": "type"
						},
						"stopPrice": 5.63737665663332876420099637471139430999755859375,
						"qty": 0.80082819046101150206595775671303272247314453125,
						"id": "id",
						"filledQty": 6.02745618307040320615897144307382404804229736328125,
						"status": "placing"
					}
				],
				"errmsg": "errmsg"
			}
		},
		"inline_response_200_5_d": {
			"properties": {
				"orderId": {
					"type": "string"
				}
			},
			"example": {
				"orderId": "orderId"
			}
		},
		"inline_response_200_5": {
			"required": [ "s" ],
			"properties": {
				"s": {
					"$ref": "#/definitions/Status"
				},
				"errmsg": {
					"type": "string"
				},
				"d": {
					"$ref": "#/definitions/inline_response_200_5_d"
				}
			},
			"example": {
				"s": {},
				"d": {
					"orderId": "orderId"
				},
				"errmsg": "errmsg"
			}
		},
		"inline_response_200_6": {
			"required": [ "s" ],
			"properties": {
				"s": {
					"$ref": "#/definitions/Status"
				},
				"errmsg": {
					"type": "string"
				},
				"d": {
					"$ref": "#/definitions/Order"
				}
			},
			"example": {
				"s": {},
				"d": {
					"side": "buy",
					"limitPrice": 5.962133916683182377482808078639209270477294921875,
					"avgPrice": 1.46581298050294517310021547018550336360931396484375,
					"instrument": "instrument",
					"type": "market",
					"parentId": "parentId",
					"parentType": "order",
					"duration": {
						"datetime": 2.3021358869347654518833223846741020679473876953125,
						"type": "type"
					},
					"stopPrice": 5.63737665663332876420099637471139430999755859375,
					"qty": 0.80082819046101150206595775671303272247314453125,
					"id": "id",
					"filledQty": 6.02745618307040320615897144307382404804229736328125,
					"status": "placing"
				},
				"errmsg": "errmsg"
			}
		},
		"inline_response_200_7": {
			"required": [ "s" ],
			"properties": {
				"s": {
					"$ref": "#/definitions/Status"
				},
				"errmsg": {
					"type": "string"
				}
			},
			"example": {
				"s": {},
				"errmsg": "errmsg"
			}
		},
		"inline_response_200_8": {
			"required": [ "s" ],
			"properties": {
				"s": {
					"$ref": "#/definitions/Status"
				},
				"errmsg": {
					"type": "string"
				},
				"d": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Position"
					}
				}
			},
			"example": {
				"s": {},
				"d": [
					{
						"side": "buy",
						"unrealizedPl": 1.46581298050294517310021547018550336360931396484375,
						"avgPrice": 6.02745618307040320615897144307382404804229736328125,
						"qty": 0.80082819046101150206595775671303272247314453125,
						"instrument": "instrument",
						"id": "id"
					},
					{
						"side": "buy",
						"unrealizedPl": 1.46581298050294517310021547018550336360931396484375,
						"avgPrice": 6.02745618307040320615897144307382404804229736328125,
						"qty": 0.80082819046101150206595775671303272247314453125,
						"instrument": "instrument",
						"id": "id"
					}
				],
				"errmsg": "errmsg"
			}
		},
		"inline_response_200_9": {
			"required": [ "s" ],
			"properties": {
				"s": {
					"$ref": "#/definitions/Status"
				},
				"errmsg": {
					"type": "string"
				},
				"d": {
					"$ref": "#/definitions/Position"
				}
			},
			"example": {
				"s": {},
				"d": {
					"side": "buy",
					"unrealizedPl": 1.46581298050294517310021547018550336360931396484375,
					"avgPrice": 6.02745618307040320615897144307382404804229736328125,
					"qty": 0.80082819046101150206595775671303272247314453125,
					"instrument": "instrument",
					"id": "id"
				},
				"errmsg": "errmsg"
			}
		},
		"inline_response_200_10": {
			"required": [ "s" ],
			"properties": {
				"s": {
					"$ref": "#/definitions/Status"
				},
				"errmsg": {
					"type": "string"
				},
				"d": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Execution"
					}
				}
			},
			"example": {
				"s": {},
				"d": [
					{
						"side": "buy",
						"price": 0.80082819046101150206595775671303272247314453125,
						"qty": 1.46581298050294517310021547018550336360931396484375,
						"instrument": "instrument",
						"id": "id",
						"time": 6.02745618307040320615897144307382404804229736328125
					},
					{
						"side": "buy",
						"price": 0.80082819046101150206595775671303272247314453125,
						"qty": 1.46581298050294517310021547018550336360931396484375,
						"instrument": "instrument",
						"id": "id",
						"time": 6.02745618307040320615897144307382404804229736328125
					}
				],
				"errmsg": "errmsg"
			}
		},
		"inline_response_200_11": {
			"required": [ "s" ],
			"properties": {
				"s": {
					"$ref": "#/definitions/Status"
				},
				"errmsg": {
					"type": "string"
				},
				"d": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Instrument"
					}
				}
			},
			"example": {
				"s": {},
				"d": [
					{
						"qtyStep": 1.46581298050294517310021547018550336360931396484375,
						"pipSize": 5.962133916683182377482808078639209270477294921875,
						"pipValue": 5.63737665663332876420099637471139430999755859375,
						"minTick": 2.3021358869347654518833223846741020679473876953125,
						"lotSize": 7.061401241503109105224211816675961017608642578125,
						"name": "name",
						"description": "description",
						"maxQty": 6.02745618307040320615897144307382404804229736328125,
						"minQty": 0.80082819046101150206595775671303272247314453125
					},
					{
						"qtyStep": 1.46581298050294517310021547018550336360931396484375,
						"pipSize": 5.962133916683182377482808078639209270477294921875,
						"pipValue": 5.63737665663332876420099637471139430999755859375,
						"minTick": 2.3021358869347654518833223846741020679473876953125,
						"lotSize": 7.061401241503109105224211816675961017608642578125,
						"name": "name",
						"description": "description",
						"maxQty": 6.02745618307040320615897144307382404804229736328125,
						"minQty": 0.80082819046101150206595775671303272247314453125
					}
				],
				"errmsg": "errmsg"
			}
		},
		"inline_response_200_12": {
			"properties": {
				"s": {
					"$ref": "#/definitions/Status"
				},
				"errmsg": {
					"type": "string",
					"description": "Error message"
				},
				"d": {
					"type": "array",
					"description": "Data",
					"items": {
						"$ref": "#/definitions/QuotesResponse"
					}
				}
			},
			"example": {
				"s": {},
				"d": [
					{
						"s": null,
						"v": {
							"volume": 2.027123023002321833274663731572218239307403564453125,
							"lp": 1.46581298050294517310021547018550336360931396484375,
							"ch": 0.80082819046101150206595775671303272247314453125,
							"ask": 5.962133916683182377482808078639209270477294921875,
							"high_price": 7.061401241503109105224211816675961017608642578125,
							"chp": 6.02745618307040320615897144307382404804229736328125,
							"bid": 5.63737665663332876420099637471139430999755859375,
							"open_price": 2.3021358869347654518833223846741020679473876953125,
							"low_price": 9.301444243932575517419536481611430644989013671875,
							"prev_close_price": 3.61607674925191080461672754609026014804840087890625
						},
						"n": "n"
					},
					{
						"s": null,
						"v": {
							"volume": 2.027123023002321833274663731572218239307403564453125,
							"lp": 1.46581298050294517310021547018550336360931396484375,
							"ch": 0.80082819046101150206595775671303272247314453125,
							"ask": 5.962133916683182377482808078639209270477294921875,
							"high_price": 7.061401241503109105224211816675961017608642578125,
							"chp": 6.02745618307040320615897144307382404804229736328125,
							"bid": 5.63737665663332876420099637471139430999755859375,
							"open_price": 2.3021358869347654518833223846741020679473876953125,
							"low_price": 9.301444243932575517419536481611430644989013671875,
							"prev_close_price": 3.61607674925191080461672754609026014804840087890625
						},
						"n": "n"
					}
				],
				"errmsg": "errmsg"
			}
		},
		"inline_response_200_13": {
			"properties": {
				"s": {
					"$ref": "#/definitions/Status"
				},
				"errmsg": {
					"type": "string",
					"description": "Error message"
				},
				"d": {
					"$ref": "#/definitions/Depth"
				}
			},
			"example": {
				"s": {},
				"d": {
					"asks": [ "", "" ],
					"bids": [ "", "" ]
				},
				"errmsg": "errmsg"
			}
		},
		"inline_response_200_14": {
			"required": [ "id", "t" ],
			"properties": {
				"id": {
					"type": "string",
					"description": "Symbol"
				},
				"p": {
					"type": "number",
					"description": "Price"
				},
				"s": {
					"type": "number",
					"description": "Size"
				},
				"t": {
					"type": "number",
					"description": "Time"
				},
				"f": {
					"type": "string",
					"description": "Type (a - ask, b - bid, t - trade, d - daily bar). Default value is `t` (trade).",
					"enum": [ "a", "b", "d", "t" ]
				},
				"o": {
					"type": "number",
					"description": "Open"
				},
				"h": {
					"type": "number",
					"description": "High"
				},
				"l": {
					"type": "number",
					"description": "Low"
				},
				"c": {
					"type": "number",
					"description": "Close"
				},
				"v": {
					"type": "number",
					"description": "Volume"
				}
			},
			"example": {
				"p": 0.80082819046101150206595775671303272247314453125,
				"s": 6.02745618307040320615897144307382404804229736328125,
				"c": 7.061401241503109105224211816675961017608642578125,
				"t": 1.46581298050294517310021547018550336360931396484375,
				"f": "a",
				"v": 9.301444243932575517419536481611430644989013671875,
				"h": 5.63737665663332876420099637471139430999755859375,
				"id": "id",
				"l": 2.3021358869347654518833223846741020679473876953125,
				"o": 5.962133916683182377482808078639209270477294921875
			}
		},
		"Order_duration": {
			"required": [ "type" ],
			"properties": {
				"type": {
					"type": "string",
					"description": "Duration ID. Internal ID that you set in ConfigResponse."
				},
				"datetime": {
					"type": "number",
					"description": "Unit timestamp (UTC)"
				}
			},
			"description": "Expiration type and UNIX timestamp date/time",
			"example": {
				"datetime": 2.3021358869347654518833223846741020679473876953125,
				"type": "type"
			}
		}
	},
	"parameters": {
		"accountId": {
			"name": "accountId",
			"in": "path",
			"description": "The account identifier",
			"required": true,
			"type": "string"
		},
		"orderId": {
			"name": "orderId",
			"in": "path",
			"description": "Order ID",
			"required": true,
			"type": "string"
		},
		"positionId": {
			"name": "positionId",
			"in": "path",
			"description": "Position ID",
			"required": true,
			"type": "string"
		},
		"symbol": {
			"name": "symbol",
			"in": "query",
			"description": "Symbol name or ticker",
			"required": true,
			"type": "string"
		},
		"resolution": {
			"name": "resolution",
			"in": "query",
			"description": "Symbol resolution. Possible resolutions are daily (`1D`, `2D` ... ), weekly (`1W`, `2W` ...), monthly (`1M`, `2M`...) and an intra-day resolution &ndash; minutes(`1`, `2` ...).",
			"required": true,
			"type": "string"
		},
		"from": {
			"name": "from",
			"in": "query",
			"description": "Unix timestamp (UTC) of the leftmost required bar, including `from`.",
			"required": true,
			"type": "number"
		},
		"to": {
			"name": "to",
			"in": "query",
			"description": "Unix timestamp (UTC) of the rightmost required bar, including `to`.",
			"required": true,
			"type": "number"
		},
		"countback": {
			"name": "countback",
			"in": "query",
			"description": "Number of bars (higher priority than `from`) starting with `to`. If `countback` is set, `from` should be ignorred. It is used only by tradingview.com, Trading Terminal will never use it.",
			"required": false,
			"type": "number"
		},
		"locale": {
			"name": "locale",
			"in": "query",
			"description": "Locale (language) id",
			"required": true,
			"type": "string",
			"enum": [ "ar", "cs", "de", "el", "en", "es", "fa", "fr", "hu", "it", "ja", "ko", "nl", "pl", "pt", "ro", "ru", "sk", "sv", "th", "tr", "vi", "zh" ]
		},
		"requestId": {
			"name": "requestId",
			"in": "query",
			"description": "Unique identifier for a request",
			"required": false,
			"type": "string"
		}
	},
	"responses": {
		"200": {
			"description": "OK",
			"schema": {
				"$ref": "#/definitions/inline_response_200_7"
			}
		}
	}
}
