/*
 * TradingView REST API Specification for Brokers
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class TradingTerminalIntegrationApiController : Controller
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get a list of executions (i.e. fills or trades) for an account and an instrument. Executions are displayed on a chart</remarks>
        /// <param name="accountId">The account identifier</param>
        /// <param name="instrument">Broker instrument name</param>
        /// <param name="maxCount">Maximum count of executions to return</param>
        /// <response code="200">List of executions</response>
        [HttpGet]
        [Route("/tradingview/v1/accounts/{accountId}/executions")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdExecutionsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse20010), description: "List of executions")]
        public virtual IActionResult AccountsAccountIdExecutionsGet([FromRoute][Required]string accountId, [FromQuery][Required()]string instrument, [FromQuery]decimal? maxCount)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse20010));

            string exampleJson = null;
            exampleJson = "{\n  \"s\" : { },\n  \"d\" : [ {\n    \"side\" : \"buy\",\n    \"price\" : 0.80082819046101150206595775671303272247314453125,\n    \"qty\" : 1.46581298050294517310021547018550336360931396484375,\n    \"instrument\" : \"instrument\",\n    \"id\" : \"id\",\n    \"time\" : 6.02745618307040320615897144307382404804229736328125\n  }, {\n    \"side\" : \"buy\",\n    \"price\" : 0.80082819046101150206595775671303272247314453125,\n    \"qty\" : 1.46581298050294517310021547018550336360931396484375,\n    \"instrument\" : \"instrument\",\n    \"id\" : \"id\",\n    \"time\" : 6.02745618307040320615897144307382404804229736328125\n  } ],\n  \"errmsg\" : \"errmsg\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse20010>(exampleJson)
            : default(InlineResponse20010);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get a list of tradeable instruments that are available for trading with the account specified</remarks>
        /// <param name="accountId">The account identifier</param>
        /// <response code="200">List of instruments</response>
        [HttpGet]
        [Route("/tradingview/v1/accounts/{accountId}/instruments")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdInstrumentsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse20011), description: "List of instruments")]
        public virtual IActionResult AccountsAccountIdInstrumentsGet([FromRoute][Required]string accountId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse20011));

            string exampleJson = null;
            exampleJson = "{\n  \"s\" : { },\n  \"d\" : [ {\n    \"qtyStep\" : 1.46581298050294517310021547018550336360931396484375,\n    \"pipSize\" : 5.962133916683182377482808078639209270477294921875,\n    \"pipValue\" : 5.63737665663332876420099637471139430999755859375,\n    \"minTick\" : 2.3021358869347654518833223846741020679473876953125,\n    \"lotSize\" : 7.061401241503109105224211816675961017608642578125,\n    \"name\" : \"name\",\n    \"description\" : \"description\",\n    \"maxQty\" : 6.02745618307040320615897144307382404804229736328125,\n    \"minQty\" : 0.80082819046101150206595775671303272247314453125\n  }, {\n    \"qtyStep\" : 1.46581298050294517310021547018550336360931396484375,\n    \"pipSize\" : 5.962133916683182377482808078639209270477294921875,\n    \"pipValue\" : 5.63737665663332876420099637471139430999755859375,\n    \"minTick\" : 2.3021358869347654518833223846741020679473876953125,\n    \"lotSize\" : 7.061401241503109105224211816675961017608642578125,\n    \"name\" : \"name\",\n    \"description\" : \"description\",\n    \"maxQty\" : 6.02745618307040320615897144307382404804229736328125,\n    \"minQty\" : 0.80082819046101150206595775671303272247314453125\n  } ],\n  \"errmsg\" : \"errmsg\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse20011>(exampleJson)
            : default(InlineResponse20011);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get pending orders for an account.</remarks>
        /// <param name="accountId">The account identifier</param>
        /// <response code="200">List of pending orders. It is also expected that broker returns orders filled/cancelled/rejected during current session.</response>
        [HttpGet]
        [Route("/tradingview/v1/accounts/{accountId}/orders")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdOrdersGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2004), description: "List of pending orders. It is also expected that broker returns orders filled/cancelled/rejected during current session.")]
        public virtual IActionResult AccountsAccountIdOrdersGet([FromRoute][Required]string accountId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2004));

            string exampleJson = null;
            exampleJson = "{\n  \"s\" : { },\n  \"d\" : [ {\n    \"side\" : \"buy\",\n    \"limitPrice\" : 5.962133916683182377482808078639209270477294921875,\n    \"avgPrice\" : 1.46581298050294517310021547018550336360931396484375,\n    \"instrument\" : \"instrument\",\n    \"type\" : \"market\",\n    \"parentId\" : \"parentId\",\n    \"parentType\" : \"order\",\n    \"duration\" : {\n      \"datetime\" : 2.3021358869347654518833223846741020679473876953125,\n      \"type\" : \"type\"\n    },\n    \"stopPrice\" : 5.63737665663332876420099637471139430999755859375,\n    \"qty\" : 0.80082819046101150206595775671303272247314453125,\n    \"id\" : \"id\",\n    \"filledQty\" : 6.02745618307040320615897144307382404804229736328125,\n    \"status\" : \"placing\"\n  }, {\n    \"side\" : \"buy\",\n    \"limitPrice\" : 5.962133916683182377482808078639209270477294921875,\n    \"avgPrice\" : 1.46581298050294517310021547018550336360931396484375,\n    \"instrument\" : \"instrument\",\n    \"type\" : \"market\",\n    \"parentId\" : \"parentId\",\n    \"parentType\" : \"order\",\n    \"duration\" : {\n      \"datetime\" : 2.3021358869347654518833223846741020679473876953125,\n      \"type\" : \"type\"\n    },\n    \"stopPrice\" : 5.63737665663332876420099637471139430999755859375,\n    \"qty\" : 0.80082819046101150206595775671303272247314453125,\n    \"id\" : \"id\",\n    \"filledQty\" : 6.02745618307040320615897144307382404804229736328125,\n    \"status\" : \"placing\"\n  } ],\n  \"errmsg\" : \"errmsg\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2004>(exampleJson)
            : default(InlineResponse2004);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get order history for an account. It is expected that returned orders will have a final status (rejected, filled, cancelled). This request is optional. If you don&#39;t support history of orders set &#x60;AccountFlags::supportOrdersHistory&#x60; to &#x60;false&#x60;.</remarks>
        /// <param name="accountId">The account identifier</param>
        /// <param name="maxCount">Maximum amount of orders to return</param>
        /// <response code="200">List of orders</response>
        [HttpGet]
        [Route("/tradingview/v1/accounts/{accountId}/ordersHistory")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdOrdersHistoryGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2004), description: "List of orders")]
        public virtual IActionResult AccountsAccountIdOrdersHistoryGet([FromRoute][Required]string accountId, [FromQuery]decimal? maxCount)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2004));

            string exampleJson = null;
            exampleJson = "{\n  \"s\" : { },\n  \"d\" : [ {\n    \"side\" : \"buy\",\n    \"limitPrice\" : 5.962133916683182377482808078639209270477294921875,\n    \"avgPrice\" : 1.46581298050294517310021547018550336360931396484375,\n    \"instrument\" : \"instrument\",\n    \"type\" : \"market\",\n    \"parentId\" : \"parentId\",\n    \"parentType\" : \"order\",\n    \"duration\" : {\n      \"datetime\" : 2.3021358869347654518833223846741020679473876953125,\n      \"type\" : \"type\"\n    },\n    \"stopPrice\" : 5.63737665663332876420099637471139430999755859375,\n    \"qty\" : 0.80082819046101150206595775671303272247314453125,\n    \"id\" : \"id\",\n    \"filledQty\" : 6.02745618307040320615897144307382404804229736328125,\n    \"status\" : \"placing\"\n  }, {\n    \"side\" : \"buy\",\n    \"limitPrice\" : 5.962133916683182377482808078639209270477294921875,\n    \"avgPrice\" : 1.46581298050294517310021547018550336360931396484375,\n    \"instrument\" : \"instrument\",\n    \"type\" : \"market\",\n    \"parentId\" : \"parentId\",\n    \"parentType\" : \"order\",\n    \"duration\" : {\n      \"datetime\" : 2.3021358869347654518833223846741020679473876953125,\n      \"type\" : \"type\"\n    },\n    \"stopPrice\" : 5.63737665663332876420099637471139430999755859375,\n    \"qty\" : 0.80082819046101150206595775671303272247314453125,\n    \"id\" : \"id\",\n    \"filledQty\" : 6.02745618307040320615897144307382404804229736328125,\n    \"status\" : \"placing\"\n  } ],\n  \"errmsg\" : \"errmsg\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2004>(exampleJson)
            : default(InlineResponse2004);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Cancel an existing order</remarks>
        /// <param name="accountId">The account identifier</param>
        /// <param name="orderId">Order ID</param>
        /// <response code="200">OK</response>
        [HttpDelete]
        [Route("/tradingview/v1/accounts/{accountId}/orders/{orderId}")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdOrdersOrderIdDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2007), description: "OK")]
        public virtual IActionResult AccountsAccountIdOrdersOrderIdDelete([FromRoute][Required]string accountId, [FromRoute][Required]string orderId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2007));

            string exampleJson = null;
            exampleJson = "{\n  \"s\" : { },\n  \"errmsg\" : \"errmsg\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2007>(exampleJson)
            : default(InlineResponse2007);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get an order for an account. It can be an active or historical order.</remarks>
        /// <param name="accountId">The account identifier</param>
        /// <param name="orderId">Order ID</param>
        /// <response code="200">Order</response>
        [HttpGet]
        [Route("/tradingview/v1/accounts/{accountId}/orders/{orderId}")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdOrdersOrderIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2006), description: "Order")]
        public virtual IActionResult AccountsAccountIdOrdersOrderIdGet([FromRoute][Required]string accountId, [FromRoute][Required]string orderId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2006));

            string exampleJson = null;
            exampleJson = "{\n  \"s\" : { },\n  \"d\" : {\n    \"side\" : \"buy\",\n    \"limitPrice\" : 5.962133916683182377482808078639209270477294921875,\n    \"avgPrice\" : 1.46581298050294517310021547018550336360931396484375,\n    \"instrument\" : \"instrument\",\n    \"type\" : \"market\",\n    \"parentId\" : \"parentId\",\n    \"parentType\" : \"order\",\n    \"duration\" : {\n      \"datetime\" : 2.3021358869347654518833223846741020679473876953125,\n      \"type\" : \"type\"\n    },\n    \"stopPrice\" : 5.63737665663332876420099637471139430999755859375,\n    \"qty\" : 0.80082819046101150206595775671303272247314453125,\n    \"id\" : \"id\",\n    \"filledQty\" : 6.02745618307040320615897144307382404804229736328125,\n    \"status\" : \"placing\"\n  },\n  \"errmsg\" : \"errmsg\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2006>(exampleJson)
            : default(InlineResponse2006);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Modify an existing order</remarks>
        /// <param name="accountId">The account identifier</param>
        /// <param name="orderId">Order ID</param>
        /// <param name="qty">Number of units</param>
        /// <param name="limitPrice">Limit Price for Limit or StopLimit order</param>
        /// <param name="stopPrice">Stop Price for Stop or StopLimit order</param>
        /// <param name="stopLoss">StopLoss price (if supported)</param>
        /// <param name="takeProfit">TakeProfit price (if supported)</param>
        /// <param name="digitalSignature">Digital signature (if supported)</param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/tradingview/v1/accounts/{accountId}/orders/{orderId}")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdOrdersOrderIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2007), description: "OK")]
        public virtual IActionResult AccountsAccountIdOrdersOrderIdPut([FromRoute][Required]string accountId, [FromRoute][Required]string orderId, [FromForm][Required()]decimal? qty, [FromForm]decimal? limitPrice, [FromForm]decimal? stopPrice, [FromForm]decimal? stopLoss, [FromForm]decimal? takeProfit, [FromForm]string digitalSignature)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2007));

            string exampleJson = null;
            exampleJson = "{\n  \"s\" : { },\n  \"errmsg\" : \"errmsg\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2007>(exampleJson)
            : default(InlineResponse2007);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Create a new order</remarks>
        /// <param name="accountId">The account identifier</param>
        /// <param name="instrument">Instrument to open the order on</param>
        /// <param name="qty">The number of units to open order for</param>
        /// <param name="side">Side. Possible values &amp;ndash; &#x60;buy&#x60; and &#x60;sell&#x60;.</param>
        /// <param name="type">Type. Possible values &amp;ndash; &#x60;market&#x60;, &#x60;stop&#x60;, &#x60;limit&#x60;, &#x60;stoplimit&#x60;.</param>
        /// <param name="limitPrice">Limit Price for Limit or StopLimit order</param>
        /// <param name="stopPrice">Stop Price for Stop or StopLimit order</param>
        /// <param name="durationType">Duration ID (if supported)</param>
        /// <param name="durationDateTime">Expiration datetime UNIX timestamp (if supported by duration type)</param>
        /// <param name="stopLoss">StopLoss price (if supported)</param>
        /// <param name="takeProfit">TakeProfit price (if supported)</param>
        /// <param name="digitalSignature">Digital signature (if supported)</param>
        /// <param name="requestId">Unique identifier for a request</param>
        /// <response code="200">Status. &#x60;message&#x60; should be filled if erroneous. &#x60;orderId&#x60; should present if successful.</response>
        [HttpPost]
        [Route("/tradingview/v1/accounts/{accountId}/orders")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdOrdersPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2005), description: "Status. &#x60;message&#x60; should be filled if erroneous. &#x60;orderId&#x60; should present if successful.")]
        public virtual IActionResult AccountsAccountIdOrdersPost([FromRoute][Required]string accountId, [FromForm][Required()]string instrument, [FromForm][Required()]decimal? qty, [FromForm][Required()]string side, [FromForm][Required()]string type, [FromForm]decimal? limitPrice, [FromForm]decimal? stopPrice, [FromForm]string durationType, [FromForm]decimal? durationDateTime, [FromForm]decimal? stopLoss, [FromForm]decimal? takeProfit, [FromForm]string digitalSignature, [FromQuery]string requestId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2005));

            string exampleJson = null;
            exampleJson = "{\n  \"s\" : { },\n  \"d\" : {\n    \"orderId\" : \"orderId\"\n  },\n  \"errmsg\" : \"errmsg\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2005>(exampleJson)
            : default(InlineResponse2005);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get positions for an account</remarks>
        /// <param name="accountId">The account identifier</param>
        /// <response code="200">Array of positions</response>
        [HttpGet]
        [Route("/tradingview/v1/accounts/{accountId}/positions")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdPositionsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2008), description: "Array of positions")]
        public virtual IActionResult AccountsAccountIdPositionsGet([FromRoute][Required]string accountId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2008));

            string exampleJson = null;
            exampleJson = "{\n  \"s\" : { },\n  \"d\" : [ {\n    \"side\" : \"buy\",\n    \"unrealizedPl\" : 1.46581298050294517310021547018550336360931396484375,\n    \"avgPrice\" : 6.02745618307040320615897144307382404804229736328125,\n    \"qty\" : 0.80082819046101150206595775671303272247314453125,\n    \"instrument\" : \"instrument\",\n    \"id\" : \"id\"\n  }, {\n    \"side\" : \"buy\",\n    \"unrealizedPl\" : 1.46581298050294517310021547018550336360931396484375,\n    \"avgPrice\" : 6.02745618307040320615897144307382404804229736328125,\n    \"qty\" : 0.80082819046101150206595775671303272247314453125,\n    \"instrument\" : \"instrument\",\n    \"id\" : \"id\"\n  } ],\n  \"errmsg\" : \"errmsg\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2008>(exampleJson)
            : default(InlineResponse2008);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Close an existing position</remarks>
        /// <param name="accountId">The account identifier</param>
        /// <param name="positionId">Position ID</param>
        /// <response code="200">OK</response>
        [HttpDelete]
        [Route("/tradingview/v1/accounts/{accountId}/positions/{positionId}")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdPositionsPositionIdDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2007), description: "OK")]
        public virtual IActionResult AccountsAccountIdPositionsPositionIdDelete([FromRoute][Required]string accountId, [FromRoute][Required]string positionId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2007));

            string exampleJson = null;
            exampleJson = "{\n  \"s\" : { },\n  \"errmsg\" : \"errmsg\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2007>(exampleJson)
            : default(InlineResponse2007);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get a position for an account</remarks>
        /// <param name="accountId">The account identifier</param>
        /// <param name="positionId">Position ID</param>
        /// <response code="200">Position object</response>
        [HttpGet]
        [Route("/tradingview/v1/accounts/{accountId}/positions/{positionId}")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdPositionsPositionIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2009), description: "Position object")]
        public virtual IActionResult AccountsAccountIdPositionsPositionIdGet([FromRoute][Required]string accountId, [FromRoute][Required]string positionId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2009));

            string exampleJson = null;
            exampleJson = "{\n  \"s\" : { },\n  \"d\" : {\n    \"side\" : \"buy\",\n    \"unrealizedPl\" : 1.46581298050294517310021547018550336360931396484375,\n    \"avgPrice\" : 6.02745618307040320615897144307382404804229736328125,\n    \"qty\" : 0.80082819046101150206595775671303272247314453125,\n    \"instrument\" : \"instrument\",\n    \"id\" : \"id\"\n  },\n  \"errmsg\" : \"errmsg\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2009>(exampleJson)
            : default(InlineResponse2009);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Modify an existing position stop loss or take profit or both</remarks>
        /// <param name="accountId">The account identifier</param>
        /// <param name="positionId">Position ID</param>
        /// <param name="stopLoss">StopLoss price</param>
        /// <param name="takeProfit">TakeProfit price</param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/tradingview/v1/accounts/{accountId}/positions/{positionId}")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdPositionsPositionIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2007), description: "OK")]
        public virtual IActionResult AccountsAccountIdPositionsPositionIdPut([FromRoute][Required]string accountId, [FromRoute][Required]string positionId, [FromForm]decimal? stopLoss, [FromForm]decimal? takeProfit)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2007));

            string exampleJson = null;
            exampleJson = "{\n  \"s\" : { },\n  \"errmsg\" : \"errmsg\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2007>(exampleJson)
            : default(InlineResponse2007);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get account information.</remarks>
        /// <param name="accountId">The account identifier</param>
        /// <param name="locale">Locale (language) id</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/tradingview/v1/accounts/{accountId}/state")]
        [ValidateModelState]
        [SwaggerOperation("AccountsAccountIdStateGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2003), description: "OK")]
        public virtual IActionResult AccountsAccountIdStateGet([FromRoute][Required]string accountId, [FromQuery][Required()]string locale)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2003));

            string exampleJson = null;
            exampleJson = "{\n  \"s\" : { },\n  \"d\" : {\n    \"amData\" : [ [ [ \"amData\", \"amData\" ], [ \"amData\", \"amData\" ] ], [ [ \"amData\", \"amData\" ], [ \"amData\", \"amData\" ] ] ],\n    \"unrealizedPl\" : 6.02745618307040320615897144307382404804229736328125,\n    \"balance\" : 0.80082819046101150206595775671303272247314453125,\n    \"equity\" : 1.46581298050294517310021547018550336360931396484375\n  },\n  \"errmsg\" : \"errmsg\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2003>(exampleJson)
            : default(InlineResponse2003);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get a list of accounts owned by the user</remarks>
        /// <response code="200">Accounts list</response>
        [HttpGet]
        [Route("/tradingview/v1/accounts")]
        [ValidateModelState]
        [SwaggerOperation("AccountsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2002), description: "Accounts list")]
        public virtual IActionResult AccountsGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2002));

            string exampleJson = null;
            exampleJson = "{\n  \"s\" : { },\n  \"d\" : [ {\n    \"currencySign\" : \"currencySign\",\n    \"name\" : \"name\",\n    \"currency\" : \"currency\",\n    \"id\" : \"id\",\n    \"config\" : {\n      \"supportLevel2Data\" : true,\n      \"supportBrackets\" : true,\n      \"supportPLUpdate\" : true,\n      \"supportClosePosition\" : true,\n      \"supportExecutions\" : true,\n      \"supportEditAmount\" : true,\n      \"supportPositionBrackets\" : true,\n      \"supportReducePosition\" : true,\n      \"showQuantityInsteadOfAmount\" : true,\n      \"supportOrderBrackets\" : true,\n      \"supportDigitalSignature\" : true,\n      \"supportStopLimitOrders\" : true,\n      \"supportMultiposition\" : true,\n      \"supportDOM\" : true,\n      \"supportOrdersHistory\" : true\n    }\n  }, {\n    \"currencySign\" : \"currencySign\",\n    \"name\" : \"name\",\n    \"currency\" : \"currency\",\n    \"id\" : \"id\",\n    \"config\" : {\n      \"supportLevel2Data\" : true,\n      \"supportBrackets\" : true,\n      \"supportPLUpdate\" : true,\n      \"supportClosePosition\" : true,\n      \"supportExecutions\" : true,\n      \"supportEditAmount\" : true,\n      \"supportPositionBrackets\" : true,\n      \"supportReducePosition\" : true,\n      \"showQuantityInsteadOfAmount\" : true,\n      \"supportOrderBrackets\" : true,\n      \"supportDigitalSignature\" : true,\n      \"supportStopLimitOrders\" : true,\n      \"supportMultiposition\" : true,\n      \"supportDOM\" : true,\n      \"supportOrdersHistory\" : true\n    }\n  } ],\n  \"errmsg\" : \"errmsg\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2002>(exampleJson)
            : default(InlineResponse2002);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get localized configuration</remarks>
        /// <param name="locale">Locale (language) id</param>
        /// <response code="200">Configuration</response>
        [HttpGet]
        [Route("/tradingview/v1/config")]
        [ValidateModelState]
        [SwaggerOperation("ConfigGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2001), description: "Configuration")]
        public virtual IActionResult ConfigGet([FromQuery][Required()]string locale)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2001));

            string exampleJson = null;
            exampleJson = "{\n  \"s\" : { },\n  \"d\" : {\n    \"pullingInterval\" : {\n      \"accountManager\" : 5.63737665663332876420099637471139430999755859375,\n      \"orders\" : 1.46581298050294517310021547018550336360931396484375,\n      \"positions\" : 5.962133916683182377482808078639209270477294921875,\n      \"history\" : 0.80082819046101150206595775671303272247314453125,\n      \"quotes\" : 6.02745618307040320615897144307382404804229736328125\n    },\n    \"accountManager\" : [ {\n      \"columns\" : [ {\n        \"fixedWidth\" : true,\n        \"tooltip\" : \"tooltip\",\n        \"id\" : \"id\",\n        \"sortable\" : true,\n        \"title\" : \"title\"\n      }, {\n        \"fixedWidth\" : true,\n        \"tooltip\" : \"tooltip\",\n        \"id\" : \"id\",\n        \"sortable\" : true,\n        \"title\" : \"title\"\n      } ],\n      \"id\" : \"id\",\n      \"title\" : \"title\"\n    }, {\n      \"columns\" : [ {\n        \"fixedWidth\" : true,\n        \"tooltip\" : \"tooltip\",\n        \"id\" : \"id\",\n        \"sortable\" : true,\n        \"title\" : \"title\"\n      }, {\n        \"fixedWidth\" : true,\n        \"tooltip\" : \"tooltip\",\n        \"id\" : \"id\",\n        \"sortable\" : true,\n        \"title\" : \"title\"\n      } ],\n      \"id\" : \"id\",\n      \"title\" : \"title\"\n    } ],\n    \"durations\" : [ {\n      \"hasTimePicker\" : true,\n      \"hasDatePicker\" : true,\n      \"id\" : \"id\",\n      \"title\" : \"title\"\n    }, {\n      \"hasTimePicker\" : true,\n      \"hasDatePicker\" : true,\n      \"id\" : \"id\",\n      \"title\" : \"title\"\n    } ]\n  },\n  \"errmsg\" : \"errmsg\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2001>(exampleJson)
            : default(InlineResponse2001);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get current depth of market for the instrument. Optional.</remarks>
        /// <param name="symbol">instrument name</param>
        /// <response code="200">Depth of market</response>
        [HttpGet]
        [Route("/tradingview/v1/depth")]
        [ValidateModelState]
        [SwaggerOperation("DepthGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse20013), description: "Depth of market")]
        public virtual IActionResult DepthGet([FromQuery][Required()]string symbol)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse20013));

            string exampleJson = null;
            exampleJson = "{\n  \"s\" : { },\n  \"d\" : {\n    \"asks\" : [ \"\", \"\" ],\n    \"bids\" : [ \"\", \"\" ]\n  },\n  \"errmsg\" : \"errmsg\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse20013>(exampleJson)
            : default(InlineResponse20013);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Bars request. You can find examples in the [documentation](https://github.com/tradingview/charting_library/wiki/UDF#bars).</remarks>
        /// <param name="symbol">Symbol name or ticker</param>
        /// <param name="resolution">Symbol resolution. Possible resolutions are daily (&#x60;1D&#x60;, &#x60;2D&#x60; ... ), weekly (&#x60;1W&#x60;, &#x60;2W&#x60; ...), monthly (&#x60;1M&#x60;, &#x60;2M&#x60;...) and an intra-day resolution &amp;ndash; minutes(&#x60;1&#x60;, &#x60;2&#x60; ...).</param>
        /// <param name="from">Unix timestamp (UTC) of the leftmost required bar, including &#x60;from&#x60;.</param>
        /// <param name="to">Unix timestamp (UTC) of the rightmost required bar, including &#x60;to&#x60;.</param>
        /// <param name="countback">Number of bars (higher priority than &#x60;from&#x60;) starting with &#x60;to&#x60;. If &#x60;countback&#x60; is set, &#x60;from&#x60; should be ignorred. It is used only by tradingview.com, Trading Terminal will never use it.</param>
        /// <response code="200">Response is expected to be an object with properties listed below. Each property is treated as a table column</response>
        [HttpGet]
        [Route("/tradingview/v1/history")]
        [ValidateModelState]
        [SwaggerOperation("HistoryGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(BarsArrays), description: "Response is expected to be an object with properties listed below. Each property is treated as a table column")]
        public virtual IActionResult HistoryGet([FromQuery][Required()]string symbol, [FromQuery][Required()]string resolution, [FromQuery][Required()]decimal? from, [FromQuery][Required()]decimal? to, [FromQuery]decimal? countback)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(BarsArrays));

            string exampleJson = null;
            exampleJson = "{\n  \"s\" : \"ok\",\n  \"c\" : [ 2.3021358869347654518833223846741020679473876953125, 2.3021358869347654518833223846741020679473876953125 ],\n  \"nb\" : 0.80082819046101150206595775671303272247314453125,\n  \"t\" : [ 6.02745618307040320615897144307382404804229736328125, 6.02745618307040320615897144307382404804229736328125 ],\n  \"v\" : [ 7.061401241503109105224211816675961017608642578125, 7.061401241503109105224211816675961017608642578125 ],\n  \"h\" : [ 5.962133916683182377482808078639209270477294921875, 5.962133916683182377482808078639209270477294921875 ],\n  \"errmsg\" : \"errmsg\",\n  \"l\" : [ 5.63737665663332876420099637471139430999755859375, 5.63737665663332876420099637471139430999755859375 ],\n  \"o\" : [ 1.46581298050294517310021547018550336360931396484375, 1.46581298050294517310021547018550336360931396484375 ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BarsArrays>(exampleJson)
            : default(BarsArrays);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Request for bar marks (circles on top of bars). You can display custom marks only in the Trading Terminal</remarks>
        /// <param name="symbol">Symbol name or ticker</param>
        /// <param name="resolution">Symbol resolution. Possible resolutions are daily (&#x60;1D&#x60;, &#x60;2D&#x60; ... ), weekly (&#x60;1W&#x60;, &#x60;2W&#x60; ...), monthly (&#x60;1M&#x60;, &#x60;2M&#x60;...) and an intra-day resolution &amp;ndash; minutes(&#x60;1&#x60;, &#x60;2&#x60; ...).</param>
        /// <param name="from">Unix timestamp (UTC) of the leftmost required bar, including &#x60;from&#x60;.</param>
        /// <param name="to">Unix timestamp (UTC) of the rightmost required bar, including &#x60;to&#x60;.</param>
        /// <response code="200">Response is expected to be an object with properties listed below. Each property is an array</response>
        [HttpGet]
        [Route("/tradingview/v1/marks")]
        [ValidateModelState]
        [SwaggerOperation("MarksGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(MarksArrays), description: "Response is expected to be an object with properties listed below. Each property is an array")]
        public virtual IActionResult MarksGet([FromQuery][Required()]string symbol, [FromQuery][Required()]string resolution, [FromQuery][Required()]decimal? from, [FromQuery][Required()]decimal? to)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MarksArrays));

            string exampleJson = null;
            exampleJson = "{\n  \"color\" : [ \"color\", \"color\" ],\n  \"labelFontColor\" : [ \"labelFontColor\", \"labelFontColor\" ],\n  \"minSize\" : [ 1.46581298050294517310021547018550336360931396484375, 1.46581298050294517310021547018550336360931396484375 ],\n  \"id\" : [ 0.80082819046101150206595775671303272247314453125, 0.80082819046101150206595775671303272247314453125 ],\n  \"time\" : [ 6.02745618307040320615897144307382404804229736328125, 6.02745618307040320615897144307382404804229736328125 ],\n  \"text\" : [ \"text\", \"text\" ],\n  \"label\" : [ \"label\", \"label\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MarksArrays>(exampleJson)
            : default(MarksArrays);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get current prices of the instrument. You can see an example of this response [here](https://demo_feed.tradingview.com/quotes?symbols&#x3D;AAPL%2CMSFT%2CIBM%2CNasdaqNM%3AAAPL).</remarks>
        /// <param name="symbols">comma separated symbols</param>
        /// <response code="200">Current prices</response>
        [HttpGet]
        [Route("/tradingview/v1/quotes")]
        [ValidateModelState]
        [SwaggerOperation("QuotesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse20012), description: "Current prices")]
        public virtual IActionResult QuotesGet([FromQuery][Required()]string symbols)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse20012));

            string exampleJson = null;
            exampleJson = "{\n  \"s\" : { },\n  \"d\" : [ {\n    \"s\" : null,\n    \"v\" : {\n      \"volume\" : 2.027123023002321833274663731572218239307403564453125,\n      \"lp\" : 1.46581298050294517310021547018550336360931396484375,\n      \"ch\" : 0.80082819046101150206595775671303272247314453125,\n      \"ask\" : 5.962133916683182377482808078639209270477294921875,\n      \"high_price\" : 7.061401241503109105224211816675961017608642578125,\n      \"chp\" : 6.02745618307040320615897144307382404804229736328125,\n      \"bid\" : 5.63737665663332876420099637471139430999755859375,\n      \"open_price\" : 2.3021358869347654518833223846741020679473876953125,\n      \"low_price\" : 9.301444243932575517419536481611430644989013671875,\n      \"prev_close_price\" : 3.61607674925191080461672754609026014804840087890625\n    },\n    \"n\" : \"n\"\n  }, {\n    \"s\" : null,\n    \"v\" : {\n      \"volume\" : 2.027123023002321833274663731572218239307403564453125,\n      \"lp\" : 1.46581298050294517310021547018550336360931396484375,\n      \"ch\" : 0.80082819046101150206595775671303272247314453125,\n      \"ask\" : 5.962133916683182377482808078639209270477294921875,\n      \"high_price\" : 7.061401241503109105224211816675961017608642578125,\n      \"chp\" : 6.02745618307040320615897144307382404804229736328125,\n      \"bid\" : 5.63737665663332876420099637471139430999755859375,\n      \"open_price\" : 2.3021358869347654518833223846741020679473876953125,\n      \"low_price\" : 9.301444243932575517419536481611430644989013671875,\n      \"prev_close_price\" : 3.61607674925191080461672754609026014804840087890625\n    },\n    \"n\" : \"n\"\n  } ],\n  \"errmsg\" : \"errmsg\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse20012>(exampleJson)
            : default(InlineResponse20012);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get a list of all instruments</remarks>
        /// <response code="200">List of instruments</response>
        [HttpGet]
        [Route("/tradingview/v1/symbol_info")]
        [ValidateModelState]
        [SwaggerOperation("SymbolInfoGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(SymbolInfoArrays), description: "List of instruments")]
        public virtual IActionResult SymbolInfoGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SymbolInfoArrays));

            string exampleJson = null;
            exampleJson = "{\n  \"symbol\" : [ \"symbol\", \"symbol\" ],\n  \"supported-resolutions\" : [ [ \"supported-resolutions\", \"supported-resolutions\" ], [ \"supported-resolutions\", \"supported-resolutions\" ] ],\n  \"ticker\" : [ \"ticker\", \"ticker\" ],\n  \"has-daily\" : [ true, true ],\n  \"minmov2\" : [ 6.02745618307040320615897144307382404804229736328125, 6.02745618307040320615897144307382404804229736328125 ],\n  \"has-weekly-and-monthly\" : [ true, true ],\n  \"timezone\" : [ \"timezone\", \"timezone\" ],\n  \"fractional\" : [ true, true ],\n  \"description\" : [ \"description\", \"description\" ],\n  \"intraday-multipliers\" : [ [ \"intraday-multipliers\", \"intraday-multipliers\" ], [ \"intraday-multipliers\", \"intraday-multipliers\" ] ],\n  \"type\" : [ \"type\", \"type\" ],\n  \"has-no-volume\" : [ true, true ],\n  \"exchange-listed\" : [ \"exchange-listed\", \"exchange-listed\" ],\n  \"has-intraday\" : [ true, true ],\n  \"exchange-traded\" : [ \"exchange-traded\", \"exchange-traded\" ],\n  \"minmovement\" : [ 0.80082819046101150206595775671303272247314453125, 0.80082819046101150206595775671303272247314453125 ],\n  \"pricescale\" : [ 1.46581298050294517310021547018550336360931396484375, 1.46581298050294517310021547018550336360931396484375 ],\n  \"session-regular\" : [ \"session-regular\", \"session-regular\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SymbolInfoArrays>(exampleJson)
            : default(SymbolInfoArrays);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Request for timescale marks (circles on the timescale). You can display custom marks only in the Trading Terminal</remarks>
        /// <param name="symbol">Symbol name or ticker</param>
        /// <param name="resolution">Symbol resolution. Possible resolutions are daily (&#x60;1D&#x60;, &#x60;2D&#x60; ... ), weekly (&#x60;1W&#x60;, &#x60;2W&#x60; ...), monthly (&#x60;1M&#x60;, &#x60;2M&#x60;...) and an intra-day resolution &amp;ndash; minutes(&#x60;1&#x60;, &#x60;2&#x60; ...).</param>
        /// <param name="from">Unix timestamp (UTC) of the leftmost required bar, including &#x60;from&#x60;.</param>
        /// <param name="to">Unix timestamp (UTC) of the rightmost required bar, including &#x60;to&#x60;.</param>
        /// <response code="200">Response is expected to be an array.</response>
        [HttpGet]
        [Route("/tradingview/v1/timescale_marks")]
        [ValidateModelState]
        [SwaggerOperation("TimescaleMarksGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<TimescaleMark>), description: "Response is expected to be an array.")]
        public virtual IActionResult TimescaleMarksGet([FromQuery][Required()]string symbol, [FromQuery][Required()]string resolution, [FromQuery][Required()]decimal? from, [FromQuery][Required()]decimal? to)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<TimescaleMark>));

            string exampleJson = null;
            exampleJson = "[ {\n  \"color\" : \"red\",\n  \"tooltip\" : \"tooltip\",\n  \"id\" : \"id\",\n  \"time\" : 0.80082819046101150206595775671303272247314453125,\n  \"label\" : \"label\"\n}, {\n  \"color\" : \"red\",\n  \"tooltip\" : \"tooltip\",\n  \"id\" : \"id\",\n  \"time\" : 0.80082819046101150206595775671303272247314453125,\n  \"label\" : \"label\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<TimescaleMark>>(exampleJson)
            : default(List<TimescaleMark>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
