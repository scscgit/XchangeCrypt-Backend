/*
 * TradingView REST API Specification for Brokers
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse20014 : IEquatable<InlineResponse20014>
    { 
        /// <summary>
        /// Symbol
        /// </summary>
        /// <value>Symbol</value>
        [Required]
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Price
        /// </summary>
        /// <value>Price</value>
        [DataMember(Name="p")]
        public decimal? P { get; set; }

        /// <summary>
        /// Size
        /// </summary>
        /// <value>Size</value>
        [DataMember(Name="s")]
        public decimal? S { get; set; }

        /// <summary>
        /// Time
        /// </summary>
        /// <value>Time</value>
        [Required]
        [DataMember(Name="t")]
        public decimal? T { get; set; }
        /// <summary>
        /// Type (a - ask, b - bid, t - trade, d - daily bar). Default value is `t` (trade).
        /// </summary>
        /// <value>Type (a - ask, b - bid, t - trade, d - daily bar). Default value is `t` (trade).</value>
        public enum FEnum
        { 
            /// <summary>
            /// Enum AEnum for a
            /// </summary>
            [EnumMember(Value = "a")]
            AEnum = 1,
            
            /// <summary>
            /// Enum BEnum for b
            /// </summary>
            [EnumMember(Value = "b")]
            BEnum = 2,
            
            /// <summary>
            /// Enum DEnum for d
            /// </summary>
            [EnumMember(Value = "d")]
            DEnum = 3,
            
            /// <summary>
            /// Enum TEnum for t
            /// </summary>
            [EnumMember(Value = "t")]
            TEnum = 4
        }

        /// <summary>
        /// Type (a - ask, b - bid, t - trade, d - daily bar). Default value is &#x60;t&#x60; (trade).
        /// </summary>
        /// <value>Type (a - ask, b - bid, t - trade, d - daily bar). Default value is &#x60;t&#x60; (trade).</value>
        [DataMember(Name="f")]
        public FEnum? F { get; set; }

        /// <summary>
        /// Open
        /// </summary>
        /// <value>Open</value>
        [DataMember(Name="o")]
        public decimal? O { get; set; }

        /// <summary>
        /// High
        /// </summary>
        /// <value>High</value>
        [DataMember(Name="h")]
        public decimal? H { get; set; }

        /// <summary>
        /// Low
        /// </summary>
        /// <value>Low</value>
        [DataMember(Name="l")]
        public decimal? L { get; set; }

        /// <summary>
        /// Close
        /// </summary>
        /// <value>Close</value>
        [DataMember(Name="c")]
        public decimal? C { get; set; }

        /// <summary>
        /// Volume
        /// </summary>
        /// <value>Volume</value>
        [DataMember(Name="v")]
        public decimal? V { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20014 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  P: ").Append(P).Append("\n");
            sb.Append("  S: ").Append(S).Append("\n");
            sb.Append("  T: ").Append(T).Append("\n");
            sb.Append("  F: ").Append(F).Append("\n");
            sb.Append("  O: ").Append(O).Append("\n");
            sb.Append("  H: ").Append(H).Append("\n");
            sb.Append("  L: ").Append(L).Append("\n");
            sb.Append("  C: ").Append(C).Append("\n");
            sb.Append("  V: ").Append(V).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse20014)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse20014 instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse20014 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20014 other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    P == other.P ||
                    P != null &&
                    P.Equals(other.P)
                ) && 
                (
                    S == other.S ||
                    S != null &&
                    S.Equals(other.S)
                ) && 
                (
                    T == other.T ||
                    T != null &&
                    T.Equals(other.T)
                ) && 
                (
                    F == other.F ||
                    F != null &&
                    F.Equals(other.F)
                ) && 
                (
                    O == other.O ||
                    O != null &&
                    O.Equals(other.O)
                ) && 
                (
                    H == other.H ||
                    H != null &&
                    H.Equals(other.H)
                ) && 
                (
                    L == other.L ||
                    L != null &&
                    L.Equals(other.L)
                ) && 
                (
                    C == other.C ||
                    C != null &&
                    C.Equals(other.C)
                ) && 
                (
                    V == other.V ||
                    V != null &&
                    V.Equals(other.V)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (P != null)
                    hashCode = hashCode * 59 + P.GetHashCode();
                    if (S != null)
                    hashCode = hashCode * 59 + S.GetHashCode();
                    if (T != null)
                    hashCode = hashCode * 59 + T.GetHashCode();
                    if (F != null)
                    hashCode = hashCode * 59 + F.GetHashCode();
                    if (O != null)
                    hashCode = hashCode * 59 + O.GetHashCode();
                    if (H != null)
                    hashCode = hashCode * 59 + H.GetHashCode();
                    if (L != null)
                    hashCode = hashCode * 59 + L.GetHashCode();
                    if (C != null)
                    hashCode = hashCode * 59 + C.GetHashCode();
                    if (V != null)
                    hashCode = hashCode * 59 + V.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse20014 left, InlineResponse20014 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse20014 left, InlineResponse20014 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
