/*
 * TradingView REST API Specification for Brokers
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 *
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Price response for an instrument
    /// </summary>
    [DataContract]
    public partial class QuotesResponse : IEquatable<QuotesResponse>
    {
        /// <summary>
        /// Gets or Sets S
        /// </summary>
        [Required]
        [DataMember(Name = "s")]
        [JsonConverter(typeof(StringEnumConverter))]
        public Status? S { get; set; }

        /// <summary>
        /// Symbol name. Should be equal to the requested one
        /// </summary>
        /// <value>Symbol name. Should be equal to the requested one</value>
        [Required]
        [DataMember(Name = "n")]
        public string N { get; set; }

        /// <summary>
        /// Gets or Sets V
        /// </summary>
        [Required]
        [DataMember(Name = "v")]
        public SingleQuote V { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuotesResponse {\n");
            sb.Append("  S: ").Append(S).Append("\n");
            sb.Append("  N: ").Append(N).Append("\n");
            sb.Append("  V: ").Append(V).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((QuotesResponse)obj);
        }

        /// <summary>
        /// Returns true if QuotesResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of QuotesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuotesResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    S == other.S ||
                    S != null &&
                    S.Equals(other.S)
                ) &&
                (
                    N == other.N ||
                    N != null &&
                    N.Equals(other.N)
                ) &&
                (
                    V == other.V ||
                    V != null &&
                    V.Equals(other.V)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (S != null)
                    hashCode = hashCode * 59 + S.GetHashCode();
                if (N != null)
                    hashCode = hashCode * 59 + N.GetHashCode();
                if (V != null)
                    hashCode = hashCode * 59 + V.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

#pragma warning disable 1591

        public static bool operator ==(QuotesResponse left, QuotesResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(QuotesResponse left, QuotesResponse right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591

        #endregion Operators
    }
}
