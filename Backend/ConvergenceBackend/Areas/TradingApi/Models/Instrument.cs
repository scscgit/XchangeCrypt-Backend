/*
 * TradingView REST API Specification for Brokers
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Instrument : IEquatable<Instrument>
    { 
        /// <summary>
        /// Broker instrument name
        /// </summary>
        /// <value>Broker instrument name</value>
        [Required]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Instrument description
        /// </summary>
        /// <value>Instrument description</value>
        [Required]
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Minimum quantity for trading
        /// </summary>
        /// <value>Minimum quantity for trading</value>
        [DataMember(Name="minQty")]
        public decimal? MinQty { get; set; }

        /// <summary>
        /// Maximum quantity for trading
        /// </summary>
        /// <value>Maximum quantity for trading</value>
        [DataMember(Name="maxQty")]
        public decimal? MaxQty { get; set; }

        /// <summary>
        /// Quantity step
        /// </summary>
        /// <value>Quantity step</value>
        [DataMember(Name="qtyStep")]
        public decimal? QtyStep { get; set; }

        /// <summary>
        /// Size of 1 pip. It is equal to minTick for non-forex symbols. For forex pairs it equals either the minTick, or the minTick multiplied by 10. For example, for EURCAD minTick is 0.00001 and pipSize is 0.0001
        /// </summary>
        /// <value>Size of 1 pip. It is equal to minTick for non-forex symbols. For forex pairs it equals either the minTick, or the minTick multiplied by 10. For example, for EURCAD minTick is 0.00001 and pipSize is 0.0001</value>
        [DataMember(Name="pipSize")]
        public decimal? PipSize { get; set; }

        /// <summary>
        /// Value of 1 pip in account currency
        /// </summary>
        /// <value>Value of 1 pip in account currency</value>
        [DataMember(Name="pipValue")]
        public decimal? PipValue { get; set; }

        /// <summary>
        /// Minimum price movement
        /// </summary>
        /// <value>Minimum price movement</value>
        [DataMember(Name="minTick")]
        public decimal? MinTick { get; set; }

        /// <summary>
        /// Size of 1 lot
        /// </summary>
        /// <value>Size of 1 lot</value>
        [DataMember(Name="lotSize")]
        public decimal? LotSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Instrument {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MinQty: ").Append(MinQty).Append("\n");
            sb.Append("  MaxQty: ").Append(MaxQty).Append("\n");
            sb.Append("  QtyStep: ").Append(QtyStep).Append("\n");
            sb.Append("  PipSize: ").Append(PipSize).Append("\n");
            sb.Append("  PipValue: ").Append(PipValue).Append("\n");
            sb.Append("  MinTick: ").Append(MinTick).Append("\n");
            sb.Append("  LotSize: ").Append(LotSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Instrument)obj);
        }

        /// <summary>
        /// Returns true if Instrument instances are equal
        /// </summary>
        /// <param name="other">Instance of Instrument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Instrument other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    MinQty == other.MinQty ||
                    MinQty != null &&
                    MinQty.Equals(other.MinQty)
                ) && 
                (
                    MaxQty == other.MaxQty ||
                    MaxQty != null &&
                    MaxQty.Equals(other.MaxQty)
                ) && 
                (
                    QtyStep == other.QtyStep ||
                    QtyStep != null &&
                    QtyStep.Equals(other.QtyStep)
                ) && 
                (
                    PipSize == other.PipSize ||
                    PipSize != null &&
                    PipSize.Equals(other.PipSize)
                ) && 
                (
                    PipValue == other.PipValue ||
                    PipValue != null &&
                    PipValue.Equals(other.PipValue)
                ) && 
                (
                    MinTick == other.MinTick ||
                    MinTick != null &&
                    MinTick.Equals(other.MinTick)
                ) && 
                (
                    LotSize == other.LotSize ||
                    LotSize != null &&
                    LotSize.Equals(other.LotSize)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (MinQty != null)
                    hashCode = hashCode * 59 + MinQty.GetHashCode();
                    if (MaxQty != null)
                    hashCode = hashCode * 59 + MaxQty.GetHashCode();
                    if (QtyStep != null)
                    hashCode = hashCode * 59 + QtyStep.GetHashCode();
                    if (PipSize != null)
                    hashCode = hashCode * 59 + PipSize.GetHashCode();
                    if (PipValue != null)
                    hashCode = hashCode * 59 + PipValue.GetHashCode();
                    if (MinTick != null)
                    hashCode = hashCode * 59 + MinTick.GetHashCode();
                    if (LotSize != null)
                    hashCode = hashCode * 59 + LotSize.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Instrument left, Instrument right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Instrument left, Instrument right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
