/*
 * TradingView REST API Specification for Brokers
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 *
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Time intervals in milliseconds that Trading Terminal uses to pull data from the server
    /// </summary>
    [DataContract]
    public partial class PullingInterval : IEquatable<PullingInterval>
    {
        /// <summary>
        /// Time interval in milliseconds that Trading Terminal uses to request chart real-time bar udpates. Default value is 500 ms
        /// </summary>
        /// <value>Time interval in milliseconds that Trading Terminal uses to request chart real-time bar udpates. Default value is 500 ms</value>
        [DataMember(Name = "history")]
        public decimal? History { get; set; }

        /// <summary>
        /// Time interval in milliseconds that Trading Terminal uses to request quote udpates. Default value is 500 ms
        /// </summary>
        /// <value>Time interval in milliseconds that Trading Terminal uses to request quote udpates. Default value is 500 ms</value>
        [DataMember(Name = "quotes")]
        public decimal? Quotes { get; set; }

        /// <summary>
        /// Time interval in milliseconds that Trading Terminal uses to request orders. Default value is 500 ms
        /// </summary>
        /// <value>Time interval in milliseconds that Trading Terminal uses to request orders. Default value is 500 ms</value>
        [DataMember(Name = "orders")]
        public decimal? Orders { get; set; }

        /// <summary>
        /// Time interval in milliseconds that Trading Terminal uses to request positions. Default value is 1000 ms
        /// </summary>
        /// <value>Time interval in milliseconds that Trading Terminal uses to request positions. Default value is 1000 ms</value>
        [DataMember(Name = "positions")]
        public decimal? Positions { get; set; }

        /// <summary>
        /// Time interval in milliseconds that Trading Terminal uses to update Account Manager tables. Default value is 500 ms
        /// </summary>
        /// <value>Time interval in milliseconds that Trading Terminal uses to update Account Manager tables. Default value is 500 ms</value>
        [DataMember(Name = "accountManager")]
        public decimal? AccountManager { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PullingInterval {\n");
            sb.Append("  History: ").Append(History).Append("\n");
            sb.Append("  Quotes: ").Append(Quotes).Append("\n");
            sb.Append("  Orders: ").Append(Orders).Append("\n");
            sb.Append("  Positions: ").Append(Positions).Append("\n");
            sb.Append("  AccountManager: ").Append(AccountManager).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PullingInterval)obj);
        }

        /// <summary>
        /// Returns true if PullingInterval instances are equal
        /// </summary>
        /// <param name="other">Instance of PullingInterval to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PullingInterval other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    History == other.History ||
                    History != null &&
                    History.Equals(other.History)
                ) &&
                (
                    Quotes == other.Quotes ||
                    Quotes != null &&
                    Quotes.Equals(other.Quotes)
                ) &&
                (
                    Orders == other.Orders ||
                    Orders != null &&
                    Orders.Equals(other.Orders)
                ) &&
                (
                    Positions == other.Positions ||
                    Positions != null &&
                    Positions.Equals(other.Positions)
                ) &&
                (
                    AccountManager == other.AccountManager ||
                    AccountManager != null &&
                    AccountManager.Equals(other.AccountManager)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (History != null)
                    hashCode = hashCode * 59 + History.GetHashCode();
                if (Quotes != null)
                    hashCode = hashCode * 59 + Quotes.GetHashCode();
                if (Orders != null)
                    hashCode = hashCode * 59 + Orders.GetHashCode();
                if (Positions != null)
                    hashCode = hashCode * 59 + Positions.GetHashCode();
                if (AccountManager != null)
                    hashCode = hashCode * 59 + AccountManager.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

#pragma warning disable 1591

        public static bool operator ==(PullingInterval left, PullingInterval right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PullingInterval left, PullingInterval right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591

        #endregion Operators
    }
}
