/*
 * TradingView REST API Specification for Brokers
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Bars data.
    /// </summary>
    [DataContract]
    public partial class BarsArrays : IEquatable<BarsArrays>
    {         /// <summary>
        /// Status code.
        /// </summary>
        /// <value>Status code.</value>
        public enum SEnum
        { 
            /// <summary>
            /// Enum OkEnum for ok
            /// </summary>
            [EnumMember]
            OkEnum = 1,
            
            /// <summary>
            /// Enum ErrorEnum for error
            /// </summary>
            [EnumMember]
            ErrorEnum = 2,
            
            /// <summary>
            /// Enum NoDataEnum for no_data
            /// </summary>
            [EnumMember]
            NoDataEnum = 3
        }

        /// <summary>
        /// Status code.
        /// </summary>
        /// <value>Status code.</value>
        [Required]
        [DataMember(Name="s")]
        public SEnum? S { get; set; }

        /// <summary>
        /// Error message. Should be provided if s &#x3D; \&quot;error\&quot;
        /// </summary>
        /// <value>Error message. Should be provided if s &#x3D; \&quot;error\&quot;</value>
        [DataMember(Name="errmsg")]
        public string Errmsg { get; set; }

        /// <summary>
        /// unix time of the next bar if there is no data (status code is no_data) in the requested period (optional)
        /// </summary>
        /// <value>unix time of the next bar if there is no data (status code is no_data) in the requested period (optional)</value>
        [DataMember(Name="nb")]
        public decimal? Nb { get; set; }

        /// <summary>
        /// bar time, unix timestamp (UTC). Daily bars should only have the date part, time should be 0.
        /// </summary>
        /// <value>bar time, unix timestamp (UTC). Daily bars should only have the date part, time should be 0.</value>
        [DataMember(Name="t")]
        public List<decimal?> T { get; set; }

        /// <summary>
        /// open price
        /// </summary>
        /// <value>open price</value>
        [DataMember(Name="o")]
        public List<decimal?> O { get; set; }

        /// <summary>
        /// high price
        /// </summary>
        /// <value>high price</value>
        [DataMember(Name="h")]
        public List<decimal?> H { get; set; }

        /// <summary>
        /// low price
        /// </summary>
        /// <value>low price</value>
        [DataMember(Name="l")]
        public List<decimal?> L { get; set; }

        /// <summary>
        /// close price
        /// </summary>
        /// <value>close price</value>
        [DataMember(Name="c")]
        public List<decimal?> C { get; set; }

        /// <summary>
        /// volume
        /// </summary>
        /// <value>volume</value>
        [DataMember(Name="v")]
        public List<decimal?> V { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BarsArrays {\n");
            sb.Append("  S: ").Append(S).Append("\n");
            sb.Append("  Errmsg: ").Append(Errmsg).Append("\n");
            sb.Append("  Nb: ").Append(Nb).Append("\n");
            sb.Append("  T: ").Append(T).Append("\n");
            sb.Append("  O: ").Append(O).Append("\n");
            sb.Append("  H: ").Append(H).Append("\n");
            sb.Append("  L: ").Append(L).Append("\n");
            sb.Append("  C: ").Append(C).Append("\n");
            sb.Append("  V: ").Append(V).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BarsArrays)obj);
        }

        /// <summary>
        /// Returns true if BarsArrays instances are equal
        /// </summary>
        /// <param name="other">Instance of BarsArrays to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BarsArrays other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    S == other.S ||
                    S != null &&
                    S.Equals(other.S)
                ) && 
                (
                    Errmsg == other.Errmsg ||
                    Errmsg != null &&
                    Errmsg.Equals(other.Errmsg)
                ) && 
                (
                    Nb == other.Nb ||
                    Nb != null &&
                    Nb.Equals(other.Nb)
                ) && 
                (
                    T == other.T ||
                    T != null &&
                    T.SequenceEqual(other.T)
                ) && 
                (
                    O == other.O ||
                    O != null &&
                    O.SequenceEqual(other.O)
                ) && 
                (
                    H == other.H ||
                    H != null &&
                    H.SequenceEqual(other.H)
                ) && 
                (
                    L == other.L ||
                    L != null &&
                    L.SequenceEqual(other.L)
                ) && 
                (
                    C == other.C ||
                    C != null &&
                    C.SequenceEqual(other.C)
                ) && 
                (
                    V == other.V ||
                    V != null &&
                    V.SequenceEqual(other.V)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (S != null)
                    hashCode = hashCode * 59 + S.GetHashCode();
                    if (Errmsg != null)
                    hashCode = hashCode * 59 + Errmsg.GetHashCode();
                    if (Nb != null)
                    hashCode = hashCode * 59 + Nb.GetHashCode();
                    if (T != null)
                    hashCode = hashCode * 59 + T.GetHashCode();
                    if (O != null)
                    hashCode = hashCode * 59 + O.GetHashCode();
                    if (H != null)
                    hashCode = hashCode * 59 + H.GetHashCode();
                    if (L != null)
                    hashCode = hashCode * 59 + L.GetHashCode();
                    if (C != null)
                    hashCode = hashCode * 59 + C.GetHashCode();
                    if (V != null)
                    hashCode = hashCode * 59 + V.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BarsArrays left, BarsArrays right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BarsArrays left, BarsArrays right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
