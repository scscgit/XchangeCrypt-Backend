/*
 * TradingView REST API Specification for Brokers
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 *
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace IO.Swagger.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class AccountStateResponse : IEquatable<AccountStateResponse>
    {
        /// <summary>
        /// Account Balance
        /// </summary>
        /// <value>Account Balance</value>
        [Required]
        [DataMember(Name = "balance")]
        public decimal? Balance { get; set; }

        /// <summary>
        /// Unrealized Profit/loss
        /// </summary>
        /// <value>Unrealized Profit/loss</value>
        [Required]
        [DataMember(Name = "unrealizedPl")]
        public decimal? UnrealizedPl { get; set; }

        /// <summary>
        /// Equity
        /// </summary>
        /// <value>Equity</value>
        [DataMember(Name = "equity")]
        public decimal? Equity { get; set; }

        /// <summary>
        /// Account Manager data. Structure of Account Manager is defined by &#x60;/config&#x60; response. Each element of this array is a table.
        /// </summary>
        /// <value>Account Manager data. Structure of Account Manager is defined by &#x60;/config&#x60; response. Each element of this array is a table.</value>
        [DataMember(Name = "amData")]
        public List<List<List<string>>> AmData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountStateResponse {\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  UnrealizedPl: ").Append(UnrealizedPl).Append("\n");
            sb.Append("  Equity: ").Append(Equity).Append("\n");
            sb.Append("  AmData: ").Append(AmData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AccountStateResponse) obj);
        }

        /// <summary>
        /// Returns true if AccountStateResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of AccountStateResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountStateResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Balance == other.Balance ||
                    Balance != null &&
                    Balance.Equals(other.Balance)
                ) &&
                (
                    UnrealizedPl == other.UnrealizedPl ||
                    UnrealizedPl != null &&
                    UnrealizedPl.Equals(other.UnrealizedPl)
                ) &&
                (
                    Equity == other.Equity ||
                    Equity != null &&
                    Equity.Equals(other.Equity)
                ) &&
                (
                    AmData == other.AmData ||
                    AmData != null &&
                    AmData.SequenceEqual(other.AmData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Balance != null)
                    hashCode = hashCode * 59 + Balance.GetHashCode();
                if (UnrealizedPl != null)
                    hashCode = hashCode * 59 + UnrealizedPl.GetHashCode();
                if (Equity != null)
                    hashCode = hashCode * 59 + Equity.GetHashCode();
                if (AmData != null)
                    hashCode = hashCode * 59 + AmData.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

#pragma warning disable 1591

        public static bool operator ==(AccountStateResponse left, AccountStateResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AccountStateResponse left, AccountStateResponse right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591

        #endregion Operators
    }
}
