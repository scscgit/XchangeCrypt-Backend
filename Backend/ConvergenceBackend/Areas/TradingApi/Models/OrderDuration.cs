/*
 * TradingView REST API Specification for Brokers
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 *
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Expiration type and UNIX timestamp date/time
    /// </summary>
    [DataContract]
    public partial class OrderDuration : IEquatable<OrderDuration>
    {
        /// <summary>
        /// Duration ID. Internal ID that you set in ConfigResponse.
        /// </summary>
        /// <value>Duration ID. Internal ID that you set in ConfigResponse.</value>
        [Required]
        [DataMember(Name = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Unit timestamp (UTC)
        /// </summary>
        /// <value>Unit timestamp (UTC)</value>
        [DataMember(Name = "datetime")]
        public decimal? Datetime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderDuration {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Datetime: ").Append(Datetime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderDuration)obj);
        }

        /// <summary>
        /// Returns true if OrderDuration instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderDuration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderDuration other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) &&
                (
                    Datetime == other.Datetime ||
                    Datetime != null &&
                    Datetime.Equals(other.Datetime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (Datetime != null)
                    hashCode = hashCode * 59 + Datetime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

#pragma warning disable 1591

        public static bool operator ==(OrderDuration left, OrderDuration right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderDuration left, OrderDuration right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591

        #endregion Operators
    }
}
