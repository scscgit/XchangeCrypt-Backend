/*
 * TradingView REST API Specification for Brokers
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 *
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Price data for an instrument
    /// </summary>
    [DataContract]
    public partial class SingleQuote : IEquatable<SingleQuote>
    {
        /// <summary>
        /// Change (displayed in Watch and Detail)
        /// </summary>
        /// <value>Change (displayed in Watch and Detail)</value>
        [DataMember(Name = "ch")]
        public decimal? Ch { get; set; }

        /// <summary>
        /// Change percent (displayed in Watch and Detail)
        /// </summary>
        /// <value>Change percent (displayed in Watch and Detail)</value>
        [DataMember(Name = "chp")]
        public decimal? Chp { get; set; }

        /// <summary>
        /// Last price
        /// </summary>
        /// <value>Last price</value>
        [DataMember(Name = "lp")]
        public decimal? Lp { get; set; }

        /// <summary>
        /// Ask price
        /// </summary>
        /// <value>Ask price</value>
        [DataMember(Name = "ask")]
        public decimal? Ask { get; set; }

        /// <summary>
        /// Bid price
        /// </summary>
        /// <value>Bid price</value>
        [DataMember(Name = "bid")]
        public decimal? Bid { get; set; }

        /// <summary>
        /// Open
        /// </summary>
        /// <value>Open</value>
        [DataMember(Name = "open_price")]
        public decimal? OpenPrice { get; set; }

        /// <summary>
        /// High price
        /// </summary>
        /// <value>High price</value>
        [DataMember(Name = "high_price")]
        public decimal? HighPrice { get; set; }

        /// <summary>
        /// Low price
        /// </summary>
        /// <value>Low price</value>
        [DataMember(Name = "low_price")]
        public decimal? LowPrice { get; set; }

        /// <summary>
        /// Previous close price
        /// </summary>
        /// <value>Previous close price</value>
        [DataMember(Name = "prev_close_price")]
        public decimal? PrevClosePrice { get; set; }

        /// <summary>
        /// Volume
        /// </summary>
        /// <value>Volume</value>
        [DataMember(Name = "volume")]
        public decimal? Volume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SingleQuote {\n");
            sb.Append("  Ch: ").Append(Ch).Append("\n");
            sb.Append("  Chp: ").Append(Chp).Append("\n");
            sb.Append("  Lp: ").Append(Lp).Append("\n");
            sb.Append("  Ask: ").Append(Ask).Append("\n");
            sb.Append("  Bid: ").Append(Bid).Append("\n");
            sb.Append("  OpenPrice: ").Append(OpenPrice).Append("\n");
            sb.Append("  HighPrice: ").Append(HighPrice).Append("\n");
            sb.Append("  LowPrice: ").Append(LowPrice).Append("\n");
            sb.Append("  PrevClosePrice: ").Append(PrevClosePrice).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SingleQuote)obj);
        }

        /// <summary>
        /// Returns true if SingleQuote instances are equal
        /// </summary>
        /// <param name="other">Instance of SingleQuote to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SingleQuote other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Ch == other.Ch ||
                    Ch != null &&
                    Ch.Equals(other.Ch)
                ) &&
                (
                    Chp == other.Chp ||
                    Chp != null &&
                    Chp.Equals(other.Chp)
                ) &&
                (
                    Lp == other.Lp ||
                    Lp != null &&
                    Lp.Equals(other.Lp)
                ) &&
                (
                    Ask == other.Ask ||
                    Ask != null &&
                    Ask.Equals(other.Ask)
                ) &&
                (
                    Bid == other.Bid ||
                    Bid != null &&
                    Bid.Equals(other.Bid)
                ) &&
                (
                    OpenPrice == other.OpenPrice ||
                    OpenPrice != null &&
                    OpenPrice.Equals(other.OpenPrice)
                ) &&
                (
                    HighPrice == other.HighPrice ||
                    HighPrice != null &&
                    HighPrice.Equals(other.HighPrice)
                ) &&
                (
                    LowPrice == other.LowPrice ||
                    LowPrice != null &&
                    LowPrice.Equals(other.LowPrice)
                ) &&
                (
                    PrevClosePrice == other.PrevClosePrice ||
                    PrevClosePrice != null &&
                    PrevClosePrice.Equals(other.PrevClosePrice)
                ) &&
                (
                    Volume == other.Volume ||
                    Volume != null &&
                    Volume.Equals(other.Volume)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Ch != null)
                    hashCode = hashCode * 59 + Ch.GetHashCode();
                if (Chp != null)
                    hashCode = hashCode * 59 + Chp.GetHashCode();
                if (Lp != null)
                    hashCode = hashCode * 59 + Lp.GetHashCode();
                if (Ask != null)
                    hashCode = hashCode * 59 + Ask.GetHashCode();
                if (Bid != null)
                    hashCode = hashCode * 59 + Bid.GetHashCode();
                if (OpenPrice != null)
                    hashCode = hashCode * 59 + OpenPrice.GetHashCode();
                if (HighPrice != null)
                    hashCode = hashCode * 59 + HighPrice.GetHashCode();
                if (LowPrice != null)
                    hashCode = hashCode * 59 + LowPrice.GetHashCode();
                if (PrevClosePrice != null)
                    hashCode = hashCode * 59 + PrevClosePrice.GetHashCode();
                if (Volume != null)
                    hashCode = hashCode * 59 + Volume.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

#pragma warning disable 1591

        public static bool operator ==(SingleQuote left, SingleQuote right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SingleQuote left, SingleQuote right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591

        #endregion Operators
    }
}
