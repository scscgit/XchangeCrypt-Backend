/*
 * TradingView REST API Specification for Brokers
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 *
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace IO.Swagger.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class Order : IEquatable<Order>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Instrument name that is used on a broker&#39;s side
        /// </summary>
        /// <value>Instrument name that is used on a broker&#39;s side</value>
        [Required]
        [DataMember(Name = "instrument")]
        public string Instrument { get; set; }

        /// <summary>
        /// Quantity
        /// </summary>
        /// <value>Quantity</value>
        [Required]
        [DataMember(Name = "qty")]
        public decimal? Qty { get; set; }

        /// <summary>
        /// Side. Possible values &amp;ndash; \&quot;buy\&quot; and \&quot;sell\&quot;.
        /// </summary>
        /// <value>Side. Possible values &amp;ndash; \&quot;buy\&quot; and \&quot;sell\&quot;.</value>
        [Required]
        [DataMember(Name = "side")]
        [JsonConverter(typeof(StringEnumConverter))]
        public SideEnum? Side { get; set; }

        /// <summary>
        /// Type. Possible values &amp;ndash; \&quot;market\&quot;, \&quot;stop\&quot;, \&quot;limit\&quot;, \&quot;stoplimit\&quot;.
        /// </summary>
        /// <value>Type. Possible values &amp;ndash; \&quot;market\&quot;, \&quot;stop\&quot;, \&quot;limit\&quot;, \&quot;stoplimit\&quot;.</value>
        [Required]
        [DataMember(Name = "type")]
        [JsonConverter(typeof(StringEnumConverter))]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Filled quantity.
        /// </summary>
        /// <value>Filled quantity.</value>
        [DataMember(Name = "filledQty")]
        public decimal? FilledQty { get; set; }

        /// <summary>
        /// Average price of order fills. It should be provided for filled / partly filled orders.
        /// </summary>
        /// <value>Average price of order fills. It should be provided for filled / partly filled orders.</value>
        [DataMember(Name = "avgPrice")]
        public decimal? AvgPrice { get; set; }

        /// <summary>
        /// Limit Price for Limit or StopLimit order.
        /// </summary>
        /// <value>Limit Price for Limit or StopLimit order.</value>
        [DataMember(Name = "limitPrice")]
        public decimal? LimitPrice { get; set; }

        /// <summary>
        /// Stop Price for Stop or StopLimit order.
        /// </summary>
        /// <value>Stop Price for Stop or StopLimit order.</value>
        [DataMember(Name = "stopPrice")]
        public decimal? StopPrice { get; set; }

        /// <summary>
        /// Identifier of a parent order or a parent position (for position brackets) depending on &#x60;parentType&#x60;. Should be set only for bracket orders.
        /// </summary>
        /// <value>Identifier of a parent order or a parent position (for position brackets) depending on &#x60;parentType&#x60;. Should be set only for bracket orders.</value>
        [DataMember(Name = "parentId")]
        public string ParentId { get; set; }

        /// <summary>
        /// Type of order&#39;s parent. Should be set only for bracket orders.
        /// </summary>
        /// <value>Type of order&#39;s parent. Should be set only for bracket orders.</value>
        [DataMember(Name = "parentType")]
        [JsonConverter(typeof(StringEnumConverter))]
        public ParentTypeEnum? ParentType { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name = "duration")]
        public OrderDuration Duration { get; set; }

        /// <summary>
        /// String constants to describe an order status.  &#x60;Status&#x60;  | Description - -- -- -- -- -|- -- -- -- -- -- -- placing   | order is not created on a broker&#39;s side yet inactive  | bracket order is created but waiting for a base order to be filled working   | order is created but not executed yet rejected  | order is rejected for some reason filled    | order is fully executed cancelled  | order is cancelled
        /// </summary>
        /// <value>String constants to describe an order status.  &#x60;Status&#x60;  | Description - -- -- -- -- -|- -- -- -- -- -- -- placing   | order is not created on a broker&#39;s side yet inactive  | bracket order is created but waiting for a base order to be filled working   | order is created but not executed yet rejected  | order is rejected for some reason filled    | order is fully executed cancelled  | order is cancelled </value>
        [Required]
        [DataMember(Name = "status")]
        [JsonConverter(typeof(StringEnumConverter))]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Instrument: ").Append(Instrument).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FilledQty: ").Append(FilledQty).Append("\n");
            sb.Append("  AvgPrice: ").Append(AvgPrice).Append("\n");
            sb.Append("  LimitPrice: ").Append(LimitPrice).Append("\n");
            sb.Append("  StopPrice: ").Append(StopPrice).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  ParentType: ").Append(ParentType).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Order) obj);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="other">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) &&
                (
                    Instrument == other.Instrument ||
                    Instrument != null &&
                    Instrument.Equals(other.Instrument)
                ) &&
                (
                    Qty == other.Qty ||
                    Qty != null &&
                    Qty.Equals(other.Qty)
                ) &&
                (
                    Side == other.Side ||
                    Side != null &&
                    Side.Equals(other.Side)
                ) &&
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) &&
                (
                    FilledQty == other.FilledQty ||
                    FilledQty != null &&
                    FilledQty.Equals(other.FilledQty)
                ) &&
                (
                    AvgPrice == other.AvgPrice ||
                    AvgPrice != null &&
                    AvgPrice.Equals(other.AvgPrice)
                ) &&
                (
                    LimitPrice == other.LimitPrice ||
                    LimitPrice != null &&
                    LimitPrice.Equals(other.LimitPrice)
                ) &&
                (
                    StopPrice == other.StopPrice ||
                    StopPrice != null &&
                    StopPrice.Equals(other.StopPrice)
                ) &&
                (
                    ParentId == other.ParentId ||
                    ParentId != null &&
                    ParentId.Equals(other.ParentId)
                ) &&
                (
                    ParentType == other.ParentType ||
                    ParentType != null &&
                    ParentType.Equals(other.ParentType)
                ) &&
                (
                    Duration == other.Duration ||
                    Duration != null &&
                    Duration.Equals(other.Duration)
                ) &&
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Instrument != null)
                    hashCode = hashCode * 59 + Instrument.GetHashCode();
                if (Qty != null)
                    hashCode = hashCode * 59 + Qty.GetHashCode();
                if (Side != null)
                    hashCode = hashCode * 59 + Side.GetHashCode();
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (FilledQty != null)
                    hashCode = hashCode * 59 + FilledQty.GetHashCode();
                if (AvgPrice != null)
                    hashCode = hashCode * 59 + AvgPrice.GetHashCode();
                if (LimitPrice != null)
                    hashCode = hashCode * 59 + LimitPrice.GetHashCode();
                if (StopPrice != null)
                    hashCode = hashCode * 59 + StopPrice.GetHashCode();
                if (ParentId != null)
                    hashCode = hashCode * 59 + ParentId.GetHashCode();
                if (ParentType != null)
                    hashCode = hashCode * 59 + ParentType.GetHashCode();
                if (Duration != null)
                    hashCode = hashCode * 59 + Duration.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

#pragma warning disable 1591

        public static bool operator ==(Order left, Order right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Order left, Order right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591

        #endregion Operators
    }
}
