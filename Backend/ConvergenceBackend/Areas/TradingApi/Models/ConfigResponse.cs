/*
 * TradingView REST API Specification for Brokers
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 *
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace IO.Swagger.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class ConfigResponse : IEquatable<ConfigResponse>
    {
        /// <summary>
        /// Localized account manager&#39;s tables configuration. Account Manager is a page in the bottom widget. This page can have multiple tables. Data of the tables is filled using &#x60;/state&#x60; response.
        /// </summary>
        /// <value>Localized account manager&#39;s tables configuration. Account Manager is a page in the bottom widget. This page can have multiple tables. Data of the tables is filled using &#x60;/state&#x60; response.</value>
        [DataMember(Name = "accountManager")]
        public List<AccountManagerTable> AccountManager { get; set; }

        /// <summary>
        /// Localized array of durations displayed in Order Ticket
        /// </summary>
        /// <value>Localized array of durations displayed in Order Ticket</value>
        [DataMember(Name = "durations")]
        public List<Duration> Durations { get; set; }

        /// <summary>
        /// Gets or Sets PullingInterval
        /// </summary>
        [DataMember(Name = "pullingInterval")]
        public PullingInterval PullingInterval { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConfigResponse {\n");
            sb.Append("  AccountManager: ").Append(AccountManager).Append("\n");
            sb.Append("  Durations: ").Append(Durations).Append("\n");
            sb.Append("  PullingInterval: ").Append(PullingInterval).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ConfigResponse)obj);
        }

        /// <summary>
        /// Returns true if ConfigResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ConfigResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfigResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    AccountManager == other.AccountManager ||
                    AccountManager != null &&
                    AccountManager.SequenceEqual(other.AccountManager)
                ) &&
                (
                    Durations == other.Durations ||
                    Durations != null &&
                    Durations.SequenceEqual(other.Durations)
                ) &&
                (
                    PullingInterval == other.PullingInterval ||
                    PullingInterval != null &&
                    PullingInterval.Equals(other.PullingInterval)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (AccountManager != null)
                    hashCode = hashCode * 59 + AccountManager.GetHashCode();
                if (Durations != null)
                    hashCode = hashCode * 59 + Durations.GetHashCode();
                if (PullingInterval != null)
                    hashCode = hashCode * 59 + PullingInterval.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

#pragma warning disable 1591

        public static bool operator ==(ConfigResponse left, ConfigResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ConfigResponse left, ConfigResponse right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591

        #endregion Operators
    }
}
